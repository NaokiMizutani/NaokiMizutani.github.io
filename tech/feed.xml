<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>N.Mizutani</title>
    <atom:link href="http://NaokiMizutani.github.io/tech/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://NaokiMizutani.github.io/tech/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Wed, 04 May 2016 18:58:07 +0900</pubDate>
    
      <item>
        <title>Installing matplotlib to CentOS7/Python3</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/python/matplotlib/Python-matplotlib.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/python/matplotlib/Python-matplotlib.html</guid>
        <description>&lt;p&gt;CentOS7 上の Python3 で matplotlib をインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CentOS7 で Python3 は導入済とする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;matplotlib の導入&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install matplotlib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;png パッケージが見つからないというエラーが表示されインストールが完了しないので、
事前に png を入れる必要がある。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install libpng-devel
# yum install freetype-devel
　　（必要に応じてインストールする）&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python プログラムによる matplotlib のテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib.pyplot as plt

plt.plot([1, 3, 2, 4])
plt.title(&amp;#39;タイトル&amp;#39;)
plt.xlabel(&amp;#39;$x$ 軸&amp;#39;)
plt.ylabel(&amp;#39;$y$ 軸&amp;#39;)

plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;グラフが表示されれば成功である。
画像の png による保存、 pdf による保存を確認する。&lt;/p&gt;

&lt;p&gt;このプログラムでタイトルに漢字を設定したが、うまく表示されなければ
（豆腐になるならば）、日本語フォントの設定が必要である。&lt;/p&gt;

&lt;p&gt;まず、CentOS7 にインストールされているフォントを 
 fc-list | grep font  で確認して、日本語のフォントを見つける。&lt;/p&gt;

&lt;p&gt;/usr/share/fonts/vlgothic/VL-Gothic-Regular.ttf: VL ゴシック,VL Gothic:style=regular&lt;/p&gt;

&lt;p&gt;が見つかったので、これを利用する方法を示す。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Python 環境下で設定ファイルのパスを確認&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib
matplotlib.matplotlib_fname()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ファイル名：  ‘/usr/local/python3/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc’  を得た。&lt;br /&gt;
2. Python 環境下で matplotlib に設定されているフォント名を確認&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;matplotlib.rcParams.get(&amp;#39;font.family&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;フォント名：  [‘sans-serif’]  を得た。&lt;br /&gt;
3. Python 環境下で matplotlib が利用可能なフォントのリストを表示させる&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib.font_manager as fm
fm.findSystemFonts()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;フォントファイル：  ‘/usr/share/fonts/vlgothic/VL-Gothic-Regular.ttf’&lt;br /&gt;
など日本語フォントがあることを確認しておく。&lt;br /&gt;
4. 存在を確認した設定ファイル matplotlibrc をユーザのホームの .cache/matplotlib フォルダにコピーする&lt;br /&gt;
コピーした matplotlibrc に以下の２行を加える（フォント名にスペースが含まれているが、クォーテーションは不要）。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;font.serif : VL Gothic
font.sans-serif : VL Gothic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;また、’pdf backend params’ のところで、pdf.fonttype がコメントアウトされているのを&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pdf.fonttype : 42&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;と TrueType を有効にしておく。&lt;br /&gt;
5. ~/.cache/matplotlib フォルダには、 fontList.py3k.cache, tex.cache の２ファイルと、追加した matplotlibrc が存在するが、matplotlibrc を修正後、fontList.py3k.cache を削除しておく。&lt;/p&gt;

&lt;p&gt;python3 を立ち上げ、matplotlib をインポートして cache を再作成させて
（または $ fc-cache -fv を実行して）動作を確認する。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(日本語フォント).ttf ファイルを入手した場合、&lt;br /&gt;
1. /usr/share/fonts/japanese のディレクトリを作成し、そこに (日本語フォント).ttf をコピーする。&lt;br /&gt;
2.   $ fc-cache -fv によってフォントのキャッシュを更新すると、
ホームディレクトリの .cache ディレクトリ内のデータが更新される。&lt;br /&gt;
3. フォントを指定して matplotlib を利用する Python サンプルプログラム&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib
import matplotlib.font_manager as font_manager
#TTFファイル(フォント)のアドレスを指定
font_path = &amp;#39;/usr/share/fonts/japanese/(日本語フォント).ttf&amp;#39;
#フォントの詳細情報を取得
font_prop = font_manager.FontProperties(fname = font_path)
#フォントの名前を使い、matplotのデフォルトフォントに指定
fname = font_prop.get_name()
print(fname)
matplotlib.rcParams[&amp;#39;font.family&amp;#39;] = fname

import matplotlib.pyplot as plt

plt.plot([1, 3, 2, 4])
plt.title(&amp;#39;タイトル&amp;#39;)
plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 04 May 2016 17:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing Jupyter to CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/python/jupyter/Jupyter.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/python/jupyter/Jupyter.html</guid>
        <description>&lt;p&gt;CentOS7 上の Python3 で Jypyter をインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CentOS7 で Python3 は導入済とする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jupyter のインストール&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install jupyter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;関連記事： 
&lt;a href=&quot;/tech/centos7/python/matplotlib/Python-matplotlib.html&quot;&gt;matplotlib のインストール&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 16:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>PythonベースのWebアプリとして R を動作させる方法</title>
        <link>http://NaokiMizutani.github.io/tech/python/apache/r/Python-R-Webapp.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/apache/r/Python-R-Webapp.html</guid>
        <description>&lt;p&gt;PypeR を用いて、サーバー側で R が動く Python ベースの Webアプリケーション (CentOS7)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CentOS7 に Apache, Python3, mod_wsgi, R, PypeR はインストールされて動作しているものとする
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/install/PythonToCentOS7.html&quot;&gt;Python3 のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/apache/Apache_Python3.html&quot;&gt;Apache/mod_wsgi のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/centos7/r/install/Install-R.html&quot;&gt;R のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/r/PypeR.html&quot;&gt;PypeR のインストール&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;R のサンプルプログラム (R コンソールで動作するソース)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a &amp;lt;- c(2,3,4,5)
summary(a)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Webアプリケーションとしての Pythonファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/usr/local/python35/bin/python3

import pyper as pr

def application(environ, start_response):
    start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain&amp;#39;)])

    r = pr.R()
    r(&amp;quot;a &amp;lt;- c(2, 3, 4, 5, 6)&amp;quot;)
    text = r(&amp;quot;summary(a)&amp;quot;)

    return [text.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 04 May 2016 08:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing R to CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/r/install/Install-R.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/r/install/Install-R.html</guid>
        <description>&lt;p&gt;CentOS7 への R のインストール&lt;/p&gt;

&lt;p&gt;基本的に yum でインストールできるようだが、epel のレポジトリ登録が必要になる。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install epel-release
# yum install R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;同様の方法として、(http://ftp.riken.jp/Linux/fedora/epel/7/x86_64/e/) を閲覧し、一覧の中から epel-release-7-?.noarch.rpm の最新版のファイル名を探して、&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# rpm -ihv http://ftp.riken.jp/Linux/fedora/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
# yum -y install R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;を実行する方法もある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/&quot;&gt;R Project/CRAN サイト&lt;/a&gt; から、Mac用 および Windows用実行イメージはダウンロードできるが、Linuxは 各ディストリビューションのパッケージ管理サービスに依存する。&lt;/p&gt;

</description>
        <pubDate>Wed, 04 May 2016 07:30:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Python から R を動作させる PypeR の導入</title>
        <link>http://NaokiMizutani.github.io/tech/python/r/PypeR.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/r/PypeR.html</guid>
        <description>&lt;p&gt;PypeR を用いて、Python のプログラムから R を呼び出す機能を有効にする方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PypeR のインストール&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install pyper&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;R のサンプルプログラム (Python から動作させる目標の R のソース)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a &amp;lt;- c(2,3,4,5)
summary(a)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python/PypeR でのサンプルプログラム（Python3 で動作するソース）&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import pyper as pr

r = pr.R()

r(&amp;quot;a &amp;lt;- c(2, 3, 4, 5, 6)&amp;quot;)
text = r(&amp;quot;summary(a)&amp;quot;)
print(text)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[test]&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 06:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing Python3 to CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/python/install/PythonToCentOS7.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/install/PythonToCentOS7.html</guid>
        <description>&lt;p&gt;Python3 の CentOS7 へのインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python3 のインストールに必要なものを先にインストール&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install zlib-devel
# yum install tk-devel
# yum install sqlite-devel
# yum install ncurses-devel
# yum install gdbm-devel
# yum install readline-devel
# yum install bzip2-devel
# yum install openssl-devel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python3 のダウンロード&lt;br /&gt;
  &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python サイト/ダウンロード&lt;/a&gt; にて、ダウンロードするpython3 のバージョンを選んで、下記にように /var/tmp などのディレクトリでダウンロード&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tar.xz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;ダウンロードした Python3 の解凍と展開、インストール&lt;br /&gt;
（ダウンロードしたファイルが Python-3.5.0.tar.xz の場合）&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ xz -dv Python-3.5.0.tar.xz
(# yum install xz ... 必要に応じて)
$ tar -xvf Python-3.5.0.tar
（ダウンロードしたファイルが Python3.5.0.tgz の場合はマウス操作で展開できる）
$ cd Python-3.5.0
（/var/tmp の下あたりで作業）
$ ./configure --with-threads --enable-shared --prefix=/usr/local/python3
$ make
# make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;PATH の設定&lt;br /&gt;
  /etc/profile または .bashrc に下記の行を追加する。&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export PATH=/usr/local/python3/bin/:$PATH&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;（.bashrc に追加した場合）追加後、 $ source .bashrc を実行&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;python3 起動時にエラーが出る場合の修正（リンクを張ることで対処）&lt;br /&gt;
（エラー）python3: error while loading shared libraries: libpython3.4m.so.1.0: cannot open shared object file: No such file or directory&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# ln -s /usr/local/python3/lib/libpython3.5m.so.1.0 /lib64/  (Python3.5.0 の場合)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;動作チェック&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python3 --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 03 May 2016 05:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Setting Apache for using Python</title>
        <link>http://NaokiMizutani.github.io/tech/python/apache/Apache_Python3.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/apache/Apache_Python3.html</guid>
        <description>&lt;p&gt;CentOS7 で Apache + mod_wsgi で Python プログラムを動かす方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;httpd の存在を確かめ（$ httpd -v）、httpd が存在しなければインストールする&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install httpd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;httpd-devel のインストール状況を確かめる&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ yum list installed | grep httpd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;httpd-devel が表示されなかったら、httpd-devel をインストールする。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install httpd-devel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;mod_wsgi のインストール&lt;br /&gt;
&lt;a href=&quot;https://modwsgi.readthedocs.org/en/develop/user-guides/quick-installation-guide.html&quot;&gt;mod_wsgi ドキュメント&lt;/a&gt; あたりを参考に、&lt;a href=&quot;https://github.com/GrahamDumpleton/mod_wsgi/releases&quot;&gt;mod_wsgi release&lt;/a&gt; から、mod_wsgi のソースコードをダウンロードしてインストールする。&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ wget https://github.com/GrahamDumpleton/mod_wsgi/archive/4.4.21.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;4.4.21.tar.gz というファイルがダウンロードされるので、それを展開する。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ tar xvfz 4.4.21.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;mod_wsgi-4.4.21 のフォルダに入って作業。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ which apxs
$ which python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;を実行して、これら実行ファイルがパスに通っているか確認する。
実行した結果、起動される python が python2.7 だったので、python3 を使うように次のように指定する。&lt;br /&gt;
上に記載した&lt;a href=&quot;https://modwsgi.readthedocs.org/en/develop/user-guides/quick-installation-guide.html&quot;&gt;サイト&lt;/a&gt; に説明がある。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./configure --with-python=/usr/local/python3/bin/python3
$ make
# make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;共有ライブラリは、/usr/lib64/httpd/modules/mod_wsgi.so としてインストールされた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache 設定ファイル /etc/httpd/conf/httpd.conf の修正
    &lt;ul&gt;
      &lt;li&gt;httpd.conf 内で確認&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    DocumentRoot : &amp;quot;/var/www/html&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;httpd.conf における修正&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    &amp;lt;Directory &amp;quot;/var/www/html&amp;quot;&amp;gt;
        Options Indexes FollowSymLinks
    に追加して
        Options Indexes FollowSymLinks ExecCGI&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;httpd.conf 内で確認&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    IncludeOptional conf.d/*.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;この記述がなければ最終行に追加する。&lt;br /&gt;
  - 実行時にエラーが出る場合の詳細ログを出すオプション&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    LogLevel warn
    を詳細なオプションに変更する
    LogLevel debug&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Apache 設定ファイル /etc/httpd/conf.d/mod_wsgi.conf を作成&lt;br /&gt;
内容&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LoadModule wsgi_module modules/mod_wsgi.so
&amp;lt;Directory &amp;quot;/var/www/html/&amp;quot;&amp;gt;
    AddHandler wsgi-script .wsgi
    AddHandler wsgi-script .py
&amp;lt;/Directory&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Apache の起動とテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# httpd -k start
（リスタートの場合）
# httpd -k restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ブラウザで http://localhost/ をアクセスしてデモページが表示されるか確認する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python Webアプリケーション テストファイル&lt;br /&gt;
下記に示すような Python ファイルをサイトのフォルダに配置してブラウザでチェックする。
Internal Server Error が出るときは、 /var/log/httpd/error_log の内容をチェックする。
その際に、Apache/httpd.conf の設定で記した LogLevel を詳細なオプションにすると少しはわかりやすい。&lt;br /&gt;
TypeError: sequence of byte string values expected, value of type str found
が出る場合には、Pythonソースファイルで文字コードの扱いに工夫が必要である。
下記サンプルファイルに示すように、戻す文字列を utf-8 から byte列に変換する操作 encode(‘utf-8’) が
必要である。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考サイト http://p–q.blogspot.jp/2014/05/wsgi1pythonwsgi.html&lt;/p&gt;

&lt;p&gt;—– sample1.py —–&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/usr/local/python3/bin/python3

def application(environ, start_response):
    start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain&amp;#39;)])
    return [&amp;#39;Hello world!&amp;#39;.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;—– sample2.py —–&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/usr/local/python3/bin/python3
import datetime

d = datetime.datetime.today()

time = &amp;quot;%s年%s月%s日  %s時%s分%s秒&amp;quot; \
    % (d.year, d.month, d.day, d.hour, d.minute, d.second)

def application(environ, start_response):
    status = &amp;#39;200 OK&amp;#39;
    response_headers = [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain; charset=utf-8&amp;#39;)]
    start_response(status, response_headers)
    return [time.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;【参考になりそうなサイト／少し古い】
http://gihyo.jp/dev/feature/01/wsgi&lt;/p&gt;

&lt;p&gt;不要かもしれない試み&lt;/p&gt;

&lt;p&gt;【1】
/etc/sysconfig/httpd の中身を修正
LANG=ja_JP.utf8
export LANG
それから httpd をリスタート&lt;/p&gt;

&lt;p&gt;【2】
【SE Linux を無効化】
# setenforce 0&lt;/p&gt;

&lt;p&gt;/etc/selinux/config の記述を変更
SELINUX=disabled&lt;/p&gt;

&lt;p&gt;【3 いずれ必要】
【Firewall の http, https のポートを開ける】&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# firewall-cmd --add-service=http --zone=public --permanent
# firewall-cmd --add-service=https --zone=public --permanent
# systemctl restart firewalld
# systemctl enable firewalld&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 03 May 2016 05:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Jupyter_r</title>
        <link>http://NaokiMizutani.github.io/tech/Jupyter_R.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/Jupyter_R.html</guid>
        <description>
【IRkernel のインストール】

$ sudo yum install czmq-devel

R をコンソールで立ち上げて、以下のコマンドを打ち込む。
&gt; install.packages(c(&#39;rzmq&#39;,&#39;repr&#39;,&#39;IRkernel&#39;,&#39;IRdisplay&#39;),
                 repos = c(&#39;http://irkernel.github.io/&#39;, getOption(&#39;repos&#39;)),
                 type = &#39;source&#39;)

&#39;lib = &quot;/usr/lib64/R/library&quot;&#39; は書き込み可能ではありません 
Would you like to use a personal library instead?  (y/n)
というメッセージが出力されるので、y を入力する。

CRAN のミラーサイトを選ぶように促されるので、Japan を選択する。

* DONE (IRkernel)

 ダウンロードされたパッケージは、以下にあります 
        ‘/tmp/Rtmpe81bSy/downloaded_packages’ 
というメッセージが出力される。

次に以下のコマンドを入力する。
&gt; IRkernel::installspec()

R を終了させる。
&gt; quit()

コンソールで jupyter notebook を立ち上げる。
$ jupyter notebook

ファイル新規作成で R が選択肢にあれば成功。


</description>
        <pubDate>Tue, 03 May 2016 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>デュアルブートのための Grub2 の設定</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/grub/CentOS-Grub2.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/grub/CentOS-Grub2.html</guid>
        <description>&lt;p&gt;CentOS7 と Windows7 をデュアルブートできる状態にするための Grub2 の設定&lt;/p&gt;

&lt;h2 id=&quot;windows-&quot;&gt;Windows のディスクボリュームの縮小&lt;/h2&gt;
&lt;p&gt;(Windows 7 の場合)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理者特権でコマンドプロンプトを立ち上げ（コマンドプロンプトアイコンを右クリックして、管理者として実行し）、’diskmgmt.msc’ と入力して、
ディスクの管理コンソールを起動する。&lt;/li&gt;
  &lt;li&gt;縮小したいボリュームを選択して、右ボタンで「ボリュームの縮小」をクリックする。&lt;/li&gt;
  &lt;li&gt;「縮小する領域のサイズ」に、空領域として確保したいサイズを設定する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;centos7-&quot;&gt;CentOS7 をインストール&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Windows をシャットダウンして、CentOSをインストールする&lt;/li&gt;
  &lt;li&gt;自動的に空領域にインストールされる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;grub2-&quot;&gt;Grub2 の変更&lt;/h2&gt;
&lt;p&gt;CentOS の terminal 上で root 権限にて以下の作業を行う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows が入っているデバイス名を調べる&lt;br /&gt;
‘fdisk -l’ の表示結果から Windows 本体が入っているデバイス名を確認する&lt;br /&gt;
 例） /dev/sda2&lt;/li&gt;
  &lt;li&gt;Windows 用の設定を追記する&lt;br /&gt;
‘/etc/grub.d/40_custom’ を編集し、ファイルの最後に以下の行を追記&lt;br /&gt;
‘/etc/default/grub’&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;menuentry &amp;quot;Windows 7&amp;quot; {
set root=(hd0,1)
chainloader +1
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;‘chainloader’ の後にスペース１つが必要、’+’ の後にスペースは入れない。&lt;/p&gt;

&lt;p&gt;/boot/grub2/device.map を参照するとデバイスの名称がわかる。
また、(hd0,1) は sda2 に、(hd0,2) は sda3 に対応する&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘grub2-mkconfig -o /boot/grub2/grub.cfg’ を実行&lt;/li&gt;
  &lt;li&gt;必要に応じて ‘vi /etc/default/grub’ によって Windows7 を自動起動にする。&lt;br /&gt;
GRUB_DEFAULT=saved を GRUB_DEFAULT=”Windows 7”&lt;br /&gt;
更新した場合、 ‘grub2-mkconfig -o /boot/grub2/grub.cfg’ を実行すること。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 02 May 2016 05:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/install/CentOS7-install.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/install/CentOS7-install.html</guid>
        <description>&lt;p&gt;CentOS Project サイトからダウンロードした CentOS7, ISO イメージを
インストールする方法を記します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CentOS の ISOイメージを用意&lt;/li&gt;
  &lt;li&gt;BIOS の設定により、ブートドライブを DVDドライブに設定&lt;/li&gt;
  &lt;li&gt;CentOS7 x86_64.iso からインストールを開始&lt;br /&gt;
　　[I]nstall CentOS7 を選ぶ。’I’ を押してエンターキーを押す。&lt;/li&gt;
  &lt;li&gt;インストールで用いる言語として「日本語」を選択して続行&lt;/li&gt;
  &lt;li&gt;インストールの概要画面
    &lt;ul&gt;
      &lt;li&gt;日付と時刻　で、時刻(UTC)修正・ネットワーク時刻はオフに設定&lt;/li&gt;
      &lt;li&gt;キーボード　は「日本語」であることを確認&lt;br /&gt;
キーボードレイアウトとして積極的に日本語を選ぶ。
言語サポートでキーボードがjpになっていることを確認する。
（それでも立ち上がってから us になっている可能性があリ、その場合にはキーボードレイアウトを設定し直す。）&lt;/li&gt;
      &lt;li&gt;言語サポート　は「日本語（日本）」であることを確認&lt;/li&gt;
      &lt;li&gt;インストールソース　は「ローカルメディア」となっていることを確認&lt;/li&gt;
      &lt;li&gt;ソフトウェアの選択
        &lt;ul&gt;
          &lt;li&gt;ベース環境として「KDE Plasma Workspace」を選択&lt;/li&gt;
          &lt;li&gt;選択した環境のアドオンとして、以下の３つを選択&lt;br /&gt;
  KDE アプリケーション, オフィススイートと生産性, 開発ツール&lt;br /&gt;
  （開発ツールを導入しなくても python2.7 はインストールされるが、 cc, gcc類はインストールされない）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;インストール先のディスクを選び、自動構成のパーティション構成を選択、暗号化しない&lt;br /&gt;
　  （既に利用済みのディスクの場合、完了ボタンを押してから残り容量が少ないというメッセージが出て、領域削除ができるメニューが表示される）&lt;/li&gt;
      &lt;li&gt;KDUMP を無効にする&lt;/li&gt;
      &lt;li&gt;ネットワークの設定はインストール後に行うことにする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;root パスワード、ユーザの作成&lt;br /&gt;
　（パスワードが単純なものである場合には、実行ボタンを２回クリックする必要がある）&lt;/li&gt;
  &lt;li&gt;インストールが完了すると、「再起動」ボタンが表示されるので、クリックする。
（再起動する際に、インストールメディアを抜かずに、自動的に排出されてから抜くこと）&lt;/li&gt;
  &lt;li&gt;起動後、かな漢字変換のテスト
    &lt;ul&gt;
      &lt;li&gt;キーボードが us と表示され jp でない場合（数字 ‘8’ キーのシフトで ‘(‘ が入力されない場合）、「システム設定」の「入力デバイス（キーボード）」で、「レイアウト」タブのところで 「jp 日本語」があるか確認して、なければ「レイアウトを設定」にチェックして追加ボタンを押して「日本語」を加え上位位置にする。&lt;/li&gt;
      &lt;li&gt;super+space キーで（superはwindowsキー）、入力メソッドの切り替えができるか確認&lt;/li&gt;
      &lt;li&gt;詳細に確認するには、「アプリケーション-&amp;gt;設定-&amp;gt;入力メソッドのセレクター」&lt;/li&gt;
      &lt;li&gt;「iBusを使用する」が選ばれていることを確認し、「設定」リンクをクリック&lt;/li&gt;
      &lt;li&gt;入力メソッドタブを選び、「日本語 - Japanese」と「日本語 - Kana Kanji」が存在することを確認&lt;br /&gt;
入力メソッドは画面右下の iBus のアイコンをクリックして、「あ」日本語-KanaKanji を選んで「日本語 - Kana Kanji」の状態で利用し、日本語と英語の切り替えは、半角/全角キーで切り替えるのがお勧め&lt;/li&gt;
      &lt;li&gt;iBus のアイコンをクリックし、「設定」の「動作」タブで、初期入力モードを ‘直接入力’ にする。&lt;/li&gt;
      &lt;li&gt;Windowsキーで、漢字と直接の切替ができるか確認する。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ネットワークの設定を「アプリケーション」「設定」「システム設定」「ネットワークの設定」で行う
    &lt;ul&gt;
      &lt;li&gt;Network Connections の「有線」タブでポートの編集を行い、IPv4 のアドレス等を設定する
        &lt;ul&gt;
          &lt;li&gt;方法を「手動」、IPアドレス等を入力設定&lt;/li&gt;
          &lt;li&gt;IPv4 is required for this connection にチェックを入れる&lt;/li&gt;
          &lt;li&gt;上部にある「自動的に接続する」にチェックを入れる&lt;/li&gt;
          &lt;li&gt;KDEウォレットシステムの選択では、Classic を選び、その後キャンセルボタンで抜ける（機能の低い方をとりあえず選択）&lt;/li&gt;
          &lt;li&gt;ツールバー（デスクトップ下のバー）にあるネットワーク接続のアイコンをクリックし、ポート名をクリックして接続する&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 30 Apr 2016 21:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Jekyll の利用方法</title>
        <link>http://NaokiMizutani.github.io/tech/jekyll/Jekyll.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/jekyll/Jekyll.html</guid>
        <description>&lt;p&gt;Mac に jekyll をインストールする方法&lt;/p&gt;

&lt;p&gt;Mac には ruby が標準でインストールされているので、jekyll をインストールするだけで利用可能となる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インストール方法&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install jekyll
（以下は、jekylltheme を導入した際のオプション）
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install jekyll-paginate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install pygments.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jekyll-&quot;&gt;Jekyll の設定&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;config.yml を編集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（以下の内容のテキストファイル config.yml をトップディレクトリに作成）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;auto: true
server: true
markdown: kramdown&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;default.html を編集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;トップディレクトリに _layouts という名前のディレクトリを作成し、その中に下記内容の default.html を作成&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Lekohub&amp;lt;/title&amp;gt;
&amp;lt;!-- cssとかjsもここで読み込み --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/common.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;js/top.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
 
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    {{ content }}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;index.md の編集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（トリプル・ダッシュ行２つの間に YAML Front Matter を挟む）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
layout: default
---
 
# leko.github.com
 
## とりあえず作ってみたGithubページ
 
ほげほげ&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;_post のファイルのヘッダーに書く日時は GMT でなければならないかも。
JSTで書くとまだ来ていない時刻と判断されてエラーになるのかも。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;レイアウト（layout）
トップディレクトリに _layouts というディレクトリを作成する。
_layouts に layout.html というファイルを作成する。
### layout.html&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;Content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Jekyll の利用方法&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{{ content }}
  &amp;lt;p&amp;gt;- rendered with layout template -&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;参考サイト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&quot;&gt;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&lt;/a&gt;
（古いバージョンに対応している）
http://leko.jp/archives/371
https://github.com/github/training-kit
http://jekyllthemes.org/
http://jekyllthemes.org/themes/kasper/&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Apr 2016 05:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Wireless LAN 親機の設定</title>
        <link>http://NaokiMizutani.github.io/tech/peripherals/lan/WirelessLAN.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/peripherals/lan/WirelessLAN.html</guid>
        <description>&lt;p&gt;Buffalo 無線LAN親機（WZR-HP-G301NH/U）を利用していますが、
一度設定すると滅多に触れない機器なので、設定方法を忘れます。
再設定する必要がありましたので、そのときの記録を残します。
設定には、専用の設定ツールソフトをインストールしたPCが必要です。&lt;/p&gt;

&lt;p&gt;Internet側を固定IPで接続する方法です。&lt;/p&gt;

&lt;h2 id=&quot;buffalo-lan-&quot;&gt;Buffalo 無線LAN 親機の設定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;本体のRouterスイッチをONにする。&lt;br /&gt;
（別機種）WSR-1166DHPの場合、背面にあるスイッチを次のようにする
    &lt;ul&gt;
      &lt;li&gt;モードスイッチを ROUTER に&lt;/li&gt;
      &lt;li&gt;AUTO/MANUALスイッチを MANUAL に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;無線LAN親機を工場出荷状態に戻す。&lt;br /&gt;
製品底面にリセットスイッチがあり、それを３秒以上押して
DIAG ランプが点滅することを確認する。&lt;br /&gt;
（電源を入れ直す。← 不要かもしれません。）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Internet側のコネクタ口（青）は、大学のLAN回線につなぐ。&lt;/li&gt;
  &lt;li&gt;LAN側のコネクタ口（黒）に設定のためのPCをつなぐ。&lt;/li&gt;
  &lt;li&gt;PCのIPアドレス設定は、自動取得にしておく。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;エアステーション設定ツールの利用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://buffalo.jp/download/driver/lan/airset.html&quot;&gt;ダウンロードサイト&lt;/a&gt; から
エアステーション設定プログラムをダウンロードして PC にインストールして起動する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;プログラムを起動すると自動的に無線LAN親機を探し、機器一覧が画面に表示される。&lt;/li&gt;
  &lt;li&gt;該当機器を選択して「次に」ボタンを押す。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;次の選択画面では、無線LAN親機のIPアドレス設定せずに、
「通常はこちら」と表示された「設定画面を開く」を押す。&lt;br /&gt;
ブラウザが立ち上がり、ユーザ名（root）を入れる。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;各種の設定&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Internet/LAN のタブ
        &lt;ul&gt;
          &lt;li&gt;IPアドレス取得方法として「手動設定」を選んでアドレスを入力&lt;/li&gt;
          &lt;li&gt;サブネットマスクを確認&lt;/li&gt;
          &lt;li&gt;「拡張設定」でデフォルトゲートウェイ、DNSを入力&lt;/li&gt;
          &lt;li&gt;「設定」ボタンを押す。&lt;br /&gt;
しばらくすると初期画面が表示される。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;無線設定のタブ、基本(11n/g/b)
        &lt;ul&gt;
          &lt;li&gt;SSID として適当な値を入力して名前を設定、&lt;/li&gt;
          &lt;li&gt;WPA-PSK にパスワードを変更設定&lt;/li&gt;
          &lt;li&gt;「設定」ボタンを押す。&lt;br /&gt;
しばらくすると初期画面が表示される。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;セキュリティタブ&lt;br /&gt;
有害サイト排除ツールの機能を切る。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで基本的な設定は終了である。
設定ツールをログアウトしておく。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;テスト&lt;/h2&gt;
&lt;p&gt;電源を入れなおしても動作しているかチェックする。&lt;/p&gt;

</description>
        <pubDate>Fri, 29 Apr 2016 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
