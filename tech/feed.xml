<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>N.Mizutani</title>
    <atom:link href="http://NaokiMizutani.github.io/tech/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://NaokiMizutani.github.io/tech/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Wed, 01 Jun 2016 12:44:47 +0900</pubDate>
    
      <item>
        <title>Visual Studio Code のインストールと設定</title>
        <link>http://NaokiMizutani.github.io/tech/vscode/install/VScode-Install.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/vscode/install/VScode-Install.html</guid>
        <description>&lt;p&gt;Visual Studio Code のインストール と 設定初歩&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;h3 id=&quot;centos7-&quot;&gt;CentOS7 へのインストール&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.visualstudio.com/ja-jp/products/code-vs.aspx&quot;&gt;Visual Studio Code&lt;/a&gt;
の
&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;ダウンロードサイト&lt;/a&gt; から、
CentOS にインストールするための.rpm パッケージを選択してダウンロードする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rpm ファイルを /var/tmp あたりに移動し、そこを作業ディレクトリとして、&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  # yum localinstall rpmパッケージファイル名
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;によってインストールする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デスクトップのスタートボタンには、アプリケーション、ユーティリティの中に 
Text Editor として起動用アイコンが設定されている。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mac-windows-&quot;&gt;Mac, Windows へのインストール&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;ダウンロードサイト&lt;/a&gt; には、
Mac用, Windows用のダウンロードボタンがある。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Macには、OS X 用のもの (VSCode-darwin-stable.zip) をダウンロードし、
zip ファイルをダブルクリックすると、アプリケーションファイルが入っているので、
アプリケーションフォルダに移動する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windowsは、インストーラによって簡単にインストールできる。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extension-&quot;&gt;Extension の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt;VisualStudio/Marketplace&lt;/a&gt; から、
役に立つ Extension を VScode に導入する方法を示す。&lt;/p&gt;

&lt;p&gt;たとえば &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=donjayamanne.python&quot;&gt;Python Extension&lt;/a&gt; は、
その Installation 方法に記載のとおり、
コマンド入力ライン（F1キー または ctrl+shift+P / command+shift+P..mac）で、
Extensions: install extensions
が選択肢に表示されるように適宜文字を入力してこれを選ぶ。
そして表示される Extension 選択肢の中から導入したいものを選択すると
インストールされる。&lt;/p&gt;

&lt;h2 id=&quot;python-&quot;&gt;Python 実行環境の設定&lt;/h2&gt;

&lt;p&gt;ワークスペースフォルダを指定するために、
エクスプローラー（ウィンドウ左上のアイコンを押して、フォルダーを開くを押して
出てくるエクスプローラーメニュー）にて、実行環境を働かせたいフォルダーを指定する。&lt;/p&gt;

&lt;p&gt;次に、コマンド入力ライン（F1キー または ctrl+shift+P / command+shift+P..mac）で、
Tasks: Configure Task Runner
を選択するために適宜入力して選択後、 Others を選ぶと、
定義ファイル tasks.json が表示されるので下記のように編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;command&quot;: &quot;python3&quot;,
&quot;isShellCommand&quot;: true,
&quot;args&quot;: [&quot;${file}&quot;],
&quot;showOutput&quot;: &quot;always&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この内容は、ワークスペースフォルダの .vscode ディレクトリに tasks.json として書き込まれる。&lt;/p&gt;

&lt;p&gt;Python のコードを書いたとき、ファイルを保存して
Tasks: Run Build Task (Ctrl+Shift+B / Command+Shift+B..Mac)
でエディタとは別エリアに実行結果が表示される。&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Raspberry Pi 動作までの設定</title>
        <link>http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting.html</guid>
        <description>&lt;p&gt;Raspberry Pi のセッティング&lt;/p&gt;

&lt;h2 id=&quot;raspberry-pi-&quot;&gt;Raspberry Pi の起動メディア作成&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MicroSD に OS/Rasbian を用意
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;Raspberry Pi のサイト&lt;/a&gt; から Raspbian をダウンロード
        &lt;ul&gt;
          &lt;li&gt;選択肢として、NOOBS, RASPBIAN, Third party’s がある。&lt;br /&gt;
RASPBIAN が Supported OS である。
また、NOOBS はいくつかのOSが含まれたインストーラとなっている。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;zip ファイルを展開し、イメージを得る（2015-05-05-raspbian-wheezy.img）&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&quot;&gt;インストレーション・ガイド&lt;/a&gt; に従って microSD カードに書き込み
        &lt;ul&gt;
          &lt;li&gt;コマンド・ラインからの方法の場合&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ diskutil list  
       （SDカードの IDENTIFIER を得る／disk2s1 ではなく disk2 *付のほう）  
    $ diskutil unmountDisk /dev/disk2  
       （Unmount of all volumes on disk2 was successful のメッセージ）  
    $ sudo dd bs=1m if=2015-05-05-raspbian-wheezy.img of=/dev/disk2  
       （30分かかる。実行状況は ctrl+t で表示できる）&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;MicroSD に OS/Rasbian を用意（NOOBS ではなく Raspbian で試す）
    &lt;ul&gt;
      &lt;li&gt;Raspbian の ZIP をダウンロード&lt;br /&gt;
 （2016.5.23 現在, RASPBIAN JESSIE 4.4 / May 2016, 1.3GB 約20分）&lt;/li&gt;
      &lt;li&gt;チェックサムの確認&lt;br /&gt;
 　ダウンロードした zip ファイルに対して、shasum コマンドを適用した戻り値と
 　サイトに表示されている SHA-1値を diff コマンド等で比較する。&lt;br /&gt;
$ shasum *.zip&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;コマンドラインからの方法に従ったインストール
    &lt;ul&gt;
      &lt;li&gt;SD カードの Disk ID を diskutil コマンドを使って得る&lt;br /&gt;
　 （パーティションではなく、Disk ID なので、下記の場合 disk4 である）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;        $ diskutil list  
        /dev/disk4 (internal, physical):
         #:                       TYPE NAME                    SIZE       IDENTIFIER
         0:     FDisk_partition_scheme                        *8.0 GB     disk4
         1:                 DOS_FAT_32 NO NAME                 8.0 GB     disk4s1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;- SD カードをアンマウントする  

$ diskutil unmountDisk /dev/disk4　（上記の Disk ID の場合）

- イメージをSDカードに転送  

$ sudo dd bs=1m if=2016-05-..........img of=/dev/rdisk4
   （30分かかる。実行状況は ctrl+t で表示できる）
   
- SD カードをアンマウントする  

$ diskutil unmountDisk /dev/disk4　（上記の Disk ID の場合）

- SD カードを抜いて、microSD カードを Raspberry PI に挿入する。
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;raspberry-pi--1&quot;&gt;Raspberry Pi 起動時の設定作業&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;電源を入れるとウィンドウシステムまで自動的に立ち上がる。&lt;br /&gt;
（Python2, Python3, Libre Office もインストール済となっている）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ネットワークを設定してブラウザで動作確認する。&lt;br /&gt;
ブラウザで日本語が表示されない場合は、漢字フォントのインストールの必要性と
ロケールの設定が疑わしい。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SD カードの容量確認&lt;br /&gt;
  $ df -h&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;パッケージのリストをサーバーから入手&lt;br /&gt;
  $ sudo apt-get update&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;漢字フォントのインストール  &lt;br /&gt;
  $ sudo apt-get install ttf-kochi-gothic xfonts-intl-japanese xfonts-intl-japanese-big xfonts-kaname&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;初期設定（ロケールの設定を含めて）&lt;br /&gt;
スタートメニューの Preferences の中の Raspberry PI Configuration を起動&lt;br /&gt;
（ターミナルを起動して $ sudo raspi-config を行うのと同じと思われる）
    &lt;ul&gt;
      &lt;li&gt;‘System’ タブで、&lt;br /&gt;
Expand Filesystem を押す（既に Expand モードのようである）&lt;br /&gt;
基本的にデフォルトでよいと思われる。&lt;/li&gt;
      &lt;li&gt;‘Interface’ タブ、’Performance’ タブも、基本的にデフォルトでよいと思われる。&lt;/li&gt;
      &lt;li&gt;‘Localization’ タブで、&lt;br /&gt;
Locale &amp;gt;  Language: ja (Japanese)  Country: JP (Japan)  Character Set: UTF-8&lt;br /&gt;
Timezone &amp;gt;  Area: Japan &lt;br /&gt;
Keyboard &amp;gt;  Country: Japan  Variant: Japanese&lt;br /&gt;
WiFiCounty &amp;gt;  WiFi Country Code: JP Japan&lt;br /&gt;
+リブートが促される。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ウィンドウシステムとしての日本語表示ができているか、ブラウザで日本語表示ができているか確認する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;かな漢字変換のインストール（メジャーなものとして２種類）&lt;/p&gt;

    &lt;p&gt;$ sudo apt-get install ibus ibus-anthy&lt;br /&gt;
  $ sudo apt-get install uim uim-anthy&lt;br /&gt;
  $ sudo apt-get install uim-dict-gtk3    （uim で用いる漢字辞書ツール）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考サイト
https://www.generation.ne.jp/topics/raspberry01/&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Raspberry Pi の各種セッティング</title>
        <link>http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting-etc.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting-etc.html</guid>
        <description>&lt;p&gt;Raspberry Pi のセッティング備忘録&lt;/p&gt;

&lt;h2 id=&quot;config-&quot;&gt;config 画面の起動&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo raspi-config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;x-window-&quot;&gt;X window の立ち上げ&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ startx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;anthy&quot;&gt;かな漢字変換（Anthy）のインストール&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install ibus-anthy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;スタートメニューの ‘設定’ の中にある「iBus の設定」を選んで、
インプットメソッドの選択タブで日本語の Anthy を
上部に表示させて「追加」ボタンを押す。&lt;/p&gt;

&lt;p&gt;ctrl + space で かな漢字の on/off&lt;/p&gt;

&lt;h2 id=&quot;ipython-notebook-&quot;&gt;IPython notebook のインストール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python2 用&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install ipython ipython-notebook&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;起動は  ipython notebook&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python3 用&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install ipython3 ipython3-notebook&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;起動は  ipython3 notebook&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IPython の中から、python のバージョンを表示させるには、&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import sys
sys.version_info&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 20 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>CentOS7 における各種サービスの管理</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/admin/CentOS7-systemctl.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/admin/CentOS7-systemctl.html</guid>
        <description>&lt;p&gt;サーバーの管理についてのメモ（httpd, firewalld などサービスの管理）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;サービスの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl start サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;サービスの停止&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl stop サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;自動起動の指定&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl enable または disable サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;管理できるサービスの一覧を表示&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl list-unit-files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;サービスのステータス&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl status サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 18 May 2016 12:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Python (mod_wsgi) を使った FORMタグの処理</title>
        <link>http://NaokiMizutani.github.io/tech/python/mod_wsgi/form/Python-Web-Upload.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/mod_wsgi/form/Python-Web-Upload.html</guid>
        <description>&lt;p&gt;HTML の入力・送信フォーム中のテキストボックスやファイルアップロードに対する
処理方法について、Python/mod_wsgi の利用を前提にサンプルを示す。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;テキストボックスの例&lt;/h2&gt;

&lt;p&gt;文字入力のためのテキストボックスに文字が入力され送信ボタンが押された場合に、
POSTメソッドでサーバに入力データを回収する手続きを示す。&lt;/p&gt;

&lt;p&gt;Apache 等のサーバで mod_wsgi が動作する python3 環境を想定している。&lt;/p&gt;

&lt;p&gt;mod_wsgi についてのサンプルプログラムはいくつか検索できるが、python3 で
漢字入力がうまく動作するまでに試行錯誤しなければならなかった。&lt;/p&gt;

&lt;p&gt;— input.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import cgi

html = &amp;#39;&amp;#39;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;ja&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;テキスト入力フィールドに入力された文字を取得する&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;テキスト入力フィールドに入力された文字を取得する&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;入力された文字は、「%s」です。&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;quot;http://localhost/input.py&amp;quot; method=&amp;quot;post&amp;quot; AcceptEncoding=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;text&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

def application(environ, start_response):
	method = environ.get(&amp;#39;REQUEST_METHOD&amp;#39;)
	data = &amp;#39;&amp;#39;
	if method == &amp;quot;GET&amp;quot;:
		pass
	elif method == &amp;quot;POST&amp;quot;:
		wsgi_input = environ.get(&amp;#39;wsgi.input&amp;#39;)
		form = cgi.FieldStorage(fp=wsgi_input, environ=environ, keep_blank_values=True)
#		for key in form:
#			data += &amp;quot;name:&amp;quot; + key + &amp;quot; value:&amp;quot; + form[key].value + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;
		data = form[&amp;#39;text&amp;#39;].value

	output = html % data
	status = &amp;#39;200 OK&amp;#39;
	response_headers = [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;),
				(&amp;#39;Content-Length&amp;#39;, str(len(output.encode(&amp;#39;utf-8&amp;#39;))))]
	start_response(status, response_headers)
	return [output.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ファイル・アップロードの例&lt;/h2&gt;

&lt;p&gt;GETメソッドでアクセスされた場合にファイル名選択のためのダイアログを表示し、
ファイルが選択され送信ボタンが押されると、
POSTメソッドでサーバにファイルデータを回収し、
ファイルの内容を入手する手続きを示す。&lt;/p&gt;

&lt;p&gt;アップロードされたファイルのデータは、サーバ側の実ファイルとして
保存するようにした。&lt;/p&gt;

&lt;p&gt;アップロードを行うには、フォームで enctype を multipart/form-data にする。&lt;/p&gt;

&lt;p&gt;— upload.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import cgi
from tempfile import TemporaryFile

html_head = &amp;#39;&amp;#39;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;ja&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

html_get = &amp;#39;&amp;#39;&amp;#39;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;ファイル・アップロードのテスト&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;ファイル・アップロード操作画面&amp;lt;/h1&amp;gt;
&amp;lt;form action=&amp;quot;http://localhost/upload.py&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
--- Select File and Push Upload-Button --- &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;upfile&amp;quot; size=&amp;quot;50&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot; Upload &amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

html_post = &amp;#39;&amp;#39;&amp;#39;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;ファイル・アップロードのテスト&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;アップロードされたファイルの内容&amp;lt;/h1&amp;gt;
--- Uploaded Text --- &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;p&amp;gt;%s&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

def application(environ, start_response):
	method = environ.get(&amp;#39;REQUEST_METHOD&amp;#39;)
	data = &amp;#39;&amp;#39;
	if method == &amp;quot;GET&amp;quot;:
		output = html_head + html_get
	elif method == &amp;quot;POST&amp;quot;:
		form = cgi.FieldStorage(environ[&amp;#39;wsgi.input&amp;#39;], environ=environ, keep_blank_values=True)
		data = form.getvalue(&amp;#39;upfile&amp;#39;, &amp;#39;&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
		output = html_head + html_post % data
		outf = open(&amp;#39;/tmp/tmp.txt&amp;#39;, &amp;#39;w&amp;#39;)
		outf.write(data)
		outf.close()
	status = &amp;#39;200 OK&amp;#39;
	response_headers = [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;),
				(&amp;#39;Content-Length&amp;#39;, str(len(output.encode(&amp;#39;utf-8&amp;#39;))))]
	start_response(status, response_headers)
	return [output.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;参考サイト&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://d.hatena.ne.jp/addition/20130330/1364620476&lt;/li&gt;
  &lt;li&gt;https://github.com/thejimmyg/wsgi-file-upload&lt;/li&gt;
  &lt;li&gt;http://flying-cat.hatenablog.com/entry/2013/09/03/102807&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>CentOS7 への Google Chorome のインストール</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/chrome/CentOS-Chrome.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/chrome/CentOS-Chrome.html</guid>
        <description>&lt;p&gt;Google Chrome はモバイル系も含めると Webブラウザとして圧倒的な世界シェア(４割強)を
有しているようだ。
デベロッパーツールも組み込まれており、その解説が様々なサイトに載っている。
ところが、Chrome は Fedora系のパッケージサポートから外れていて、簡単に yum でインストールできない。CentOS7 への Chrome のインストールを行ったので記しておく。&lt;/p&gt;

&lt;h2 id=&quot;google-chrome-&quot;&gt;Google Chrome のダウンロードとインストール方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.co.jp/chrome/browser/desktop/index.html&quot;&gt;Google Chrome&lt;/a&gt; のダウンロードサイトから、Chrome for Linux (Fedora 版）をダウンロードする。
ダウンロードすると、64bit ステーブル版の rpm パッケージがダウンロードされる。&lt;/p&gt;

&lt;p&gt;この rpm パッケージファイルをもとにインストールする。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum localinstall rpmパッケージファイル名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;インストールが完了すると、デスクトップのアプリケーションにアイコンが追加されている。&lt;/p&gt;
</description>
        <pubDate>Sat, 14 May 2016 12:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Jinja2 を用いた JavaScript グラフのスクリプト生成</title>
        <link>http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2-JS.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2-JS.html</guid>
        <description>&lt;p&gt;&lt;a href=&quot;/tech/python/jinja2/Python3-Jinja2.html&quot;&gt;Jinja2 を試してみて&lt;/a&gt;、
テンプレートに流し込む大まかな手続きをつかんだので、
Jinja2 を使ってサイト用の HTML(JavaScript) を生成する。&lt;/p&gt;

&lt;p&gt;JavaScriptグラフパッケージ &lt;a href=&quot;/tech/javascript/highcharts/HighCharts-JavaScript.html&quot;&gt;HighCharts&lt;/a&gt; のデータを Python で生成して描かせるタスクを目標とし、
&lt;a href=&quot;/tech/python/apache/Apache_Python3.html&quot;&gt;Apache + mod_wsgi&lt;/a&gt; など、
Python3 が動作するサーバ環境があるものとする。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下に示す２つのファイルを /var/www/html に配置する。&lt;/p&gt;

&lt;p&gt;template.html は、Highcharts を用いたグラフ描画を行う html ファイルである。
グラフ描画のためのデータ部分を {{ data_contents }} と置いて、
ここに jinja2 を用いて Python プログラムでデータを生成して流し込む。&lt;/p&gt;

&lt;p&gt;Python プログラム jinja2webtest.py の中で、リスト case_list には 10種類のパラメータが
格納してある。
まず、それぞれのパラメータ &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; に対して、
関数   &lt;script type=&quot;math/tex&quot;&gt;y = 1 / ( 1 + e^{-D a (x - b)} )&lt;/script&gt; に従う &lt;script type=&quot;math/tex&quot;&gt;(x, y)&lt;/script&gt; 数値データを生成する。&lt;/p&gt;

&lt;p&gt;そして、生成されたグラフデータの数値は、凡例用のデータ名やグラフ線の色指定とともに
Highcharts用のテキストデータとし、jinja2 によってテンプレートに入れ込む。&lt;/p&gt;

&lt;p&gt;手順 1）1つの(a, b)組に対して、下に示すテキストを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        name: &#39;Data1: (1.0, 0.0)&#39;,
        color: &#39;rgba(255, 0, 0, 1.0)&#39;,
        data: 
        [
            [-4,0.001],
            [-3.9,0.001],
            [-3.8,0.002],
            [-3.7,0.002], 
              :
              :
        ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;手順 2）さらに (a, b)組があれば、上記に続けてカンマを入れた後、同様のテキストを生成する。&lt;/p&gt;

&lt;p&gt;作成された HTML は mod_wsgi によって web発信される仕組みとなっている。&lt;/p&gt;

&lt;p&gt;なお、Python のファイル jinja2webtest.py において、Jinja2 の FileSystemLoader のところで
相対パスを設定したところ、テンプレートファイルを見つけられない現象に陥った。
解決法がわからなかったので、絶対パスを使っている。&lt;/p&gt;

&lt;p&gt;— template.html&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
		&amp;lt;title&amp;gt;Highcharts Example&amp;lt;/title&amp;gt;

		&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
${demo.css}
		&amp;lt;/style&amp;gt;
		&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
$(function () {
    $(&amp;#39;#container&amp;#39;).highcharts({
        chart: {
            zoomType: &amp;#39;xy&amp;#39;
        },
        title: {
            text: &amp;#39;項目特性曲線&amp;#39;
        },
        subtitle: {
            text: &amp;#39;Some curves with params:(a, b)&amp;#39;
        },
        xAxis: {
            title: {
                enabled: true,
                text: &amp;#39;Ability (θ)&amp;#39;
            },
            min: -4.0,
            max: 4.0,
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true,
            gridLineWidth: 1
        },
        yAxis: {
            title: {
                text: &amp;#39;Probability&amp;#39;
            },
            min: 0.0,
            max: 1.0
        },
        legend: {
            layout: &amp;#39;vertical&amp;#39;,
            align: &amp;#39;left&amp;#39;,
            verticalAlign: &amp;#39;top&amp;#39;,
            x: 55,
            y: 50,
            floating: true,
            backgroundColor: (Highcharts.theme &amp;amp;&amp;amp; Highcharts.theme.legendBackgroundColor) || &amp;#39;#FFFFFF&amp;#39;,
            borderWidth: 1
        },
        plotOptions: {
            series: {
                marker: {
                    enabled: false
                }
            }
        },
        series: [
{{ data_contents }}
        ] 
    });
});
		&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/highcharts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/modules/exporting.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot; style=&amp;quot;min-width: 310px; height: 600px; max-width: 800px; margin: 0 auto&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;— jinja2webtest.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import math
from jinja2 import Environment, FileSystemLoader

class AppSample(object):

    def __init__(self):
        pass

    def __call__(self, environ, start_response):
        method = environ[&amp;#39;REQUEST_METHOD&amp;#39;]
        if method == &amp;#39;GET&amp;#39;:
            return self.message1(environ, start_response)
        else:
            start_response(&amp;#39;501 Not Implemented&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain&amp;#39;)])
            return &amp;#39;Not Implemented&amp;#39;

    def message1(self, environ, start_response):

        env = Environment(loader=FileSystemLoader(&amp;#39;/var/www/html/&amp;#39;, encoding=&amp;#39;utf8&amp;#39;))
        template = env.get_template(&amp;#39;template.html&amp;#39;)
        
        selection_color = [&amp;quot;color: &amp;#39;rgba(255,    0,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  255,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,    0,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  255,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(255,    0,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(255,  255,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(128,    0,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  128,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,    0,  128, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(100,  100,  100, 1.0)&amp;#39;,\n&amp;quot;]
        
        insert_text = &amp;#39;&amp;#39;
        tab = &amp;#39; &amp;#39; * 4
        
        case_list = [[&amp;quot;Data1&amp;quot;, 1.0, 0.0],
                     [&amp;quot;Data2&amp;quot;, 2.0, -0.5],
                     [&amp;quot;Data3&amp;quot;, 3.0, 0.3],
        	     [&amp;quot;Data4&amp;quot;, 4.0, -2.0],
                     [&amp;quot;Data5&amp;quot;, 5.0, 1.5],
                     [&amp;quot;Data6&amp;quot;, 6.0, 0.7],
        	     [&amp;quot;Data7&amp;quot;, 7.0, -1.5],
                     [&amp;quot;Data8&amp;quot;, 8.0, 0.8],
                     [&amp;quot;Data9&amp;quot;, 9.0, 1.2],
        	     [&amp;quot;Data10&amp;quot;, 10.0, -0.7]]
        
        val_D = 1.701
        for n in range(len(case_list)):
            case = case_list[n]
            val_a = case[1] 
            val_b = case[2]
            insert_text += tab*2 + &amp;quot;{\n&amp;quot;
            insert_text += tab*3 + &amp;quot;name: &amp;#39;{0}: ({1:5.3f}, {2:5.3f})&amp;#39;,\n&amp;quot;.format(case[0], val_a, val_b)
            insert_text += tab*3 + selection_color[n]
            insert_text += tab*3 + &amp;quot;data: [\n&amp;quot;
            for ntheta in range(-40, 41, 1):
                val_theta = ntheta / 10.0
                val_prob = 1.0 / (1.0 + math.exp(- val_D * val_a * (val_theta - val_b))) 
                if ntheta == 40:
                    insert_text += (tab*4 + &amp;quot;[{0:3.1f},{1:5.3f}]\n&amp;quot;.format(val_theta, val_prob))
                else:
                    insert_text += (tab*4 + &amp;quot;[{0:3.1f},{1:5.3f}],\n&amp;quot;.format(val_theta, val_prob))
            insert_text += tab*3 + &amp;quot;]\n&amp;quot;
            if n == len(case_list) - 1:
                insert_text += tab*2 + &amp;quot;}\n&amp;quot;
            else:
                insert_text += tab*2 + &amp;quot;},\n&amp;quot;
        text = template.render({&amp;#39;data_contents&amp;#39;: insert_text})
        
        start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;)])

        return [text.encode(&amp;#39;utf-8&amp;#39;)]


application = AppSample()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 13 May 2016 20:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>HTML生成のための Jinja2 の導入</title>
        <link>http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2.html</guid>
        <description>&lt;p&gt;ダイナミックなページを Python を用いて作成することを考えると、
労力を減らすためにテンプレートエンジンやフレームワークを導入するのが
得策と考えられる。
ここでは、Python 用のテンプレートエンジンとして、利用者が多そうな Jinja2 を試す。&lt;/p&gt;

&lt;p&gt;Python用のテンプレートエンジンとして、&lt;br /&gt;
* 標準モジュールとしての string.Template（&lt;a href=&quot;http://coreblog.org/ats/stuff/minpy_web/09/03.html&quot;&gt;みんなのPython Web編&lt;/a&gt; に解説）&lt;br /&gt;
* &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;jinja2&lt;/a&gt;&lt;br /&gt;
などがある。&lt;/p&gt;

&lt;p&gt;Webアプリケーション・フレームワークとしては、&lt;br /&gt;
* &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;  （ &lt;a href=&quot;http://djangoproject.jp/&quot;&gt;DjangoProject.jp&lt;/a&gt; には日本語のドキュメンテーションも充実している）&lt;br /&gt;
* &lt;a href=&quot;http://bottlepy.org/docs/dev/index.html&quot;&gt;Bottle&lt;/a&gt;&lt;br /&gt;
などがある。
また、Pythonサイトには、&lt;a href=&quot;https://wiki.python.org/moin/WebFrameworks&quot;&gt;フレームワークの一覧&lt;/a&gt; も掲載されている。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jinja2-&quot;&gt;Jinja2 のインストール&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install jinja2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;jinja2-hello-world&quot;&gt;Jinja2 の利用（Hello world）&lt;/h2&gt;
&lt;p&gt;Python ターミナルで下記を実行すると、テンプレートとしての ‘Hello ‘ の  のところに、値 ‘World’ がレンダリングされ、戻り値 ‘Hello World’ を得る。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from jinja2 import Template
template = Template(&amp;#39;Hello {{ name }}!&amp;#39;)
template.render(name=&amp;#39;World&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;この機能を使って、HTML の枠組みの中の特定箇所に Python プログラムの結果を
流し込むことにより、得たい HTML を容易に生成することができる。&lt;/p&gt;

&lt;h2 id=&quot;jinja2--1&quot;&gt;Jinja2 によるテンプレートの利用&lt;/h2&gt;

&lt;p&gt;下記ファイル（data.csv, template.txt, jinja2test.py） を同一ディレクトリにおいて、
jinja2test.py を実行すると、template.txt に指定された形式で data.csv の内容が整形されて
出力される。&lt;/p&gt;

&lt;p&gt;— data.csv&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;西暦年,和暦年,干支,干支の読み
西暦2008年,平成20年,子年,ねずみどし
西暦2009年,平成21年,丑年,うしどし
西暦2010年,平成22年,寅年,とらどし
西暦2011年,平成23年,卯年,うさぎどし
西暦2012年,平成24年,辰年,たつどし
西暦2013年,平成25年,巳年,みどし
西暦2014年,平成26年,午年,うまどし
西暦2015年,平成27年,未年,ひつじどし
西暦2016年,平成28年,申年,さるどし
西暦2017年,平成29年,酉年,とりどし
西暦2018年,平成30年,戌年,いぬどし
西暦2019年,平成31年,亥年,いのししどし&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;— template.txt&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;----- This is a test. -----
{% for data in dictlist %}{{ loop.index }}: {{ data.year_w }} ({{ data.year_j }}) ： {{ data.eto }} ({{ data.eto_yomi }})
{% endfor %}----- The test ended. -----&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;— jinja2test.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import csv
from jinja2 import Environment, FileSystemLoader
env = Environment(loader=FileSystemLoader(&amp;#39;./&amp;#39;, encoding=&amp;#39;utf8&amp;#39;))
template = env.get_template(&amp;#39;template.txt&amp;#39;)

dictlist = []
with open(&amp;#39;data.csv&amp;#39;, &amp;#39;r&amp;#39;) as f:
    reader = csv.reader(f)
    header = next(reader)
    for row in reader:
        dictlist.append({&amp;#39;year_w&amp;#39;: row[0], &amp;#39;year_j&amp;#39;: row[1], &amp;#39;eto&amp;#39;: row[2], &amp;#39;eto_yomi&amp;#39;: row[3] })

text = template.render({&amp;#39;dictlist&amp;#39;: dictlist})

print(text)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 13 May 2016 19:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>社会情報システム特論の内容</title>
        <link>http://NaokiMizutani.github.io/tech/python/apache/r/Socilec2016.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/apache/r/Socilec2016.html</guid>
        <description>&lt;p&gt;Linux(CentOS7) をベースに、データサイエンス方面で有効なツールを種々試行する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tech/centos7/install/CentOS7-install.html&quot;&gt;CentOS7 のインストール&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tech/javascript/highcharts/HighCharts-JavaScript.html&quot;&gt;JavaScript パッケージ (HighChars) の試用&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tech/python/install/PythonToCentOS7.html&quot;&gt;CentOS7 への Python3 のインストール&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tech/centos7/python/jupyter/Jupyter.html&quot;&gt;Jupyter のインストール&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tech/python/apache/Apache_Python3.html&quot;&gt;Python を動作させるための Apache の設定&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;データサイエンス向けの環境構築&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/centos7/r/install/Install-R.html&quot;&gt;R のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/jupyter/r/Jupyter_R.html&quot;&gt;Jupyter で R を動作&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/centos7/python/matplotlib/Python-matplotlib.html&quot;&gt;matplotlib の導入&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/r/PypeR.html&quot;&gt;Python から R を動作&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/apache/r/Python-R-Webapp.html&quot;&gt;Python から R を動作させる Web アプリ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;![画像] (/tech/structure.png)&lt;/p&gt;

</description>
        <pubDate>Wed, 11 May 2016 08:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>JavaScript パッケージ (HighCharts) を使ってグラフを描く</title>
        <link>http://NaokiMizutani.github.io/tech/javascript/highcharts/HighCharts-JavaScript.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/javascript/highcharts/HighCharts-JavaScript.html</guid>
        <description>&lt;p&gt;統計分析結果をブラウザ上にグラフとして表示するためのライブラリの試用&lt;/p&gt;

&lt;p&gt;グラフを表示する Javascript ライブラリはいくつもあるようだが、
その中で &lt;a href=&quot;http://www.highcharts.com/&quot;&gt;Highcharts&lt;/a&gt; というライブラリを試してみた。&lt;/p&gt;

&lt;p&gt;サイトのデモを見ながら、組み込みたい機能を決めて、&lt;a href=&quot;http://www.highcharts.com/download&quot;&gt;ダウンロード&lt;/a&gt; したサンプルプログラムを参考に作りたいグラフに近づけていく。&lt;/p&gt;

&lt;p&gt;最終的には Javascript を生成する方法を考えなければならないが、
高機能なグラフを比較的簡単に利用できるのはありがたい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ブラウザで確認するための html ファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
		&amp;lt;title&amp;gt;Highcharts Example&amp;lt;/title&amp;gt;

		&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
${demo.css}
		&amp;lt;/style&amp;gt;
		&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
$(function () {
    $(&amp;#39;#container&amp;#39;).highcharts({
        chart: {
            zoomType: &amp;#39;xy&amp;#39;
        },
        title: {
            text: &amp;#39;項目特性曲線&amp;#39;
        },
        subtitle: {
            text: &amp;#39;3 Curves (a, b)&amp;#39;
        },
        xAxis: {
            title: {
                enabled: true,
                text: &amp;#39;Ability (θ)&amp;#39;
            },
            min: -4.0,
            max: 4.0,
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true,
            gridLineWidth: 1
        },
        yAxis: {
            title: {
                text: &amp;#39;Probability&amp;#39;
            },
            min: 0.0,
            max: 1.0
        },
        legend: {
            layout: &amp;#39;vertical&amp;#39;,
            align: &amp;#39;left&amp;#39;,
            verticalAlign: &amp;#39;top&amp;#39;,
            x: 100,
            y: 50,
            floating: true,
            backgroundColor: (Highcharts.theme &amp;amp;&amp;amp; Highcharts.theme.legendBackgroundColor) || &amp;#39;#FFFFFF&amp;#39;,
            borderWidth: 1
        },
        plotOptions: {
            series: {
                marker: {
                    enabled: false
                }
            }
        },
        series: [{
            name: &amp;#39;Data1: (1.0, 0.0)&amp;#39;,
            color: &amp;#39;rgba(255, 0, 0, 1.0)&amp;#39;,
            data: 
            [[-4,0.001], [-3.9,0.001], [-3.8,0.002], [-3.7,0.002], 
            [-3.6,0.002], [-3.5,0.003], [-3.4,0.003], [-3.3,0.004], 
            [-3.2,0.004], [-3.1,0.005], [-3,0.006], [-2.9,0.007], 
            [-2.8,0.008], [-2.7,0.010], [-2.6,0.012], [-2.5,0.014], 
            [-2.4,0.017], [-2.3,0.020], [-2.2,0.023], [-2.1,0.027], 
            [-2,0.032], [-1.9,0.038], [-1.8,0.045], [-1.7,0.053], 
            [-1.6,0.062], [-1.5,0.072], [-1.4,0.085], [-1.3,0.099], 
            [-1.2,0.115], [-1.1,0.133], [-1,0.154], [-0.9,0.178], 
            [-0.8,0.204], [-0.7,0.233], [-0.6,0.265], [-0.5,0.299], 
            [-0.4,0.336], [-0.3,0.375], [-0.2,0.416], [-0.1,0.458], 
            [0,0.500], [0.1,0.542], [0.2,0.584], [0.3,0.625], 
            [0.4,0.664], [0.5,0.701], [0.6,0.735], [0.7,0.767], 
            [0.8,0.796], [0.9,0.822], [1,0.846], [1.1,0.867], 
            [1.2,0.885], [1.3,0.901], [1.4,0.915], [1.5,0.928], 
            [1.6,0.938], [1.7,0.947], [1.8,0.955], [1.9,0.962], 
            [2,0.968], [2.1,0.973], [2.2,0.977], [2.3,0.980], 
            [2.4,0.983], [2.5,0.986], [2.6,0.988], [2.7,0.990], 
            [2.8,0.992], [2.9,0.993], [3,0.994], [3.1,0.995], 
            [3.2,0.996], [3.3,0.996], [3.4,0.997], [3.5,0.997], 
            [3.6,0.998], [3.7,0.998], [3.8,0.998], [3.9,0.999], 
            [4,0.999]] 
        },
        {
            name: &amp;#39;Data2: (2.0, 0.5)&amp;#39;,
            color: &amp;#39;rgba(0, 255, 0, 1.0)&amp;#39;,
            data: 
            [[-4,0.000], [-3.9,0.000], [-3.8,0.000], [-3.7,0.000], 
            [-3.6,0.000], [-3.5,0.000], [-3.4,0.000], [-3.3,0.000], 
            [-3.2,0.000], [-3.1,0.000], [-3,0.000], [-2.9,0.000], 
            [-2.8,0.000], [-2.7,0.000], [-2.6,0.000], [-2.5,0.000], 
            [-2.4,0.000], [-2.3,0.000], [-2.2,0.000], [-2.1,0.000], 
            [-2,0.000], [-1.9,0.000], [-1.8,0.000], [-1.7,0.001], 
            [-1.6,0.001], [-1.5,0.001], [-1.4,0.002], [-1.3,0.002], 
            [-1.2,0.003], [-1.1,0.004], [-1,0.006], [-0.9,0.008], 
            [-0.8,0.012], [-0.7,0.017], [-0.6,0.023], [-0.5,0.032], 
            [-0.4,0.045], [-0.3,0.062], [-0.2,0.085], [-0.1,0.115], 
            [0,0.154], [0.1,0.204], [0.2,0.265], [0.3,0.336], 
            [0.4,0.416], [0.5,0.500], [0.6,0.584], [0.7,0.664], 
            [0.8,0.735], [0.9,0.796], [1,0.846], [1.1,0.885], 
            [1.2,0.915], [1.3,0.938], [1.4,0.955], [1.5,0.968], 
            [1.6,0.977], [1.7,0.983], [1.8,0.988], [1.9,0.992], 
            [2,0.994], [2.1,0.996], [2.2,0.997], [2.3,0.998], 
            [2.4,0.998], [2.5,0.999], [2.6,0.999], [2.7,0.999], 
            [2.8,1.000], [2.9,1.000], [3,1.000], [3.1,1.000], 
            [3.2,1.000], [3.3,1.000], [3.4,1.000], [3.5,1.000], 
            [3.6,1.000], [3.7,1.000], [3.8,1.000], [3.9,1.000], 
            [4,1.000]] 
        },
        {
            name: &amp;#39;Data3: (3.0, -0.4)&amp;#39;,
            color: &amp;#39;rgba(0, 0, 255, 1.0)&amp;#39;,
            data:
            [[-4,0.000], [-3.9,0.000], [-3.8,0.000], [-3.7,0.000], 
            [-3.6,0.000], [-3.5,0.000], [-3.4,0.000], [-3.3,0.000], 
            [-3.2,0.000], [-3.1,0.000], [-3,0.000], [-2.9,0.000], 
            [-2.8,0.000], [-2.7,0.000], [-2.6,0.000], [-2.5,0.000], 
            [-2.4,0.000], [-2.3,0.000], [-2.2,0.000], [-2.1,0.000], 
            [-2,0.000], [-1.9,0.000], [-1.8,0.001], [-1.7,0.001], 
            [-1.6,0.002], [-1.5,0.004], [-1.4,0.006], [-1.3,0.010], 
            [-1.2,0.017], [-1.1,0.027], [-1,0.045], [-0.9,0.072], 
            [-0.8,0.115], [-0.7,0.178], [-0.6,0.265], [-0.5,0.375], 
            [-0.4,0.500], [-0.3,0.625], [-0.2,0.735], [-0.1,0.822], 
            [0,0.885], [0.1,0.928], [0.2,0.955], [0.3,0.973], 
            [0.4,0.983], [0.5,0.990], [0.6,0.994], [0.7,0.996], 
            [0.8,0.998], [0.9,0.999], [1,0.999], [1.1,1.000], 
            [1.2,1.000], [1.3,1.000], [1.4,1.000], [1.5,1.000], 
            [1.6,1.000], [1.7,1.000], [1.8,1.000], [1.9,1.000], 
            [2,1.000], [2.1,1.000], [2.2,1.000], [2.3,1.000], 
            [2.4,1.000], [2.5,1.000], [2.6,1.000], [2.7,1.000], 
            [2.8,1.000], [2.9,1.000], [3,1.000], [3.1,1.000], 
            [3.2,1.000], [3.3,1.000], [3.4,1.000], [3.5,1.000], 
            [3.6,1.000], [3.7,1.000], [3.8,1.000], [3.9,1.000], 
            [4,1.000]]
        }] 
    });
});
		&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/highcharts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/modules/exporting.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot; style=&amp;quot;min-width: 310px; height: 600px; max-width: 800px; margin: 0 auto&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 10 May 2016 08:30:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Setting Jupyter for R</title>
        <link>http://NaokiMizutani.github.io/tech/python/jupyter/r/Jupyter_R.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/jupyter/r/Jupyter_R.html</guid>
        <description>&lt;p&gt;Jupyter で R を動かすために必要な IRkernel をインストールする方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/IRkernel/IRkernel&quot;&gt;IRkernel サイト&lt;/a&gt; に詳細にインストール方法が記載されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;必要なライブラリを準備&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install czmq-devel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;R をコンソールで立ち上げて、以下のコマンドを打ち込む。&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)),
                 type = &amp;#39;source&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;—メッセージ出力 &lt;br /&gt;
　’lib = “/usr/lib64/R/library”’ は書き込み可能ではありません&lt;br /&gt;
　Would you like to use a personal library instead?  (y/n)&lt;br /&gt;
が表示されるので、y を入力する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CRAN のミラーサイトを選ぶように促されるので、Japan を選択する。 &lt;br /&gt;
—メッセージ出力&lt;br /&gt;
　DONE (IRkernel)&lt;br /&gt;
　ダウンロードされたパッケージは、以下にあります&lt;br /&gt;
　　‘/tmp/Rtmpe81bSy/downloaded_packages’&lt;br /&gt;
が表示される。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;次に以下のコマンドを入力する。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; IRkernel::installspec()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;R を終了させる　  &amp;gt; quit()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;コンソールで jupyter notebook を立ち上げ、動作を確認する。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ jupyter notebook&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ファイル新規作成で R が選択肢として表示されれば成功。&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 18:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing matplotlib to CentOS7/Python3</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/python/matplotlib/Python-matplotlib.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/python/matplotlib/Python-matplotlib.html</guid>
        <description>&lt;p&gt;CentOS7 上の Python3 で matplotlib をインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CentOS7 で Python3 は導入済とする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;matplotlib の導入&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install matplotlib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;png パッケージが見つからないというエラーが表示されインストールが完了しないので、
事前に png を入れる必要がある。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install libpng-devel
# yum install freetype-devel
　　（必要に応じてインストールする）&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python プログラムによる matplotlib のテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib.pyplot as plt

plt.plot([1, 3, 2, 4])
plt.title(&amp;#39;タイトル&amp;#39;)
plt.xlabel(&amp;#39;$x$ 軸&amp;#39;)
plt.ylabel(&amp;#39;$y$ 軸&amp;#39;)

plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;グラフが表示されれば成功である。
画像の png による保存、 pdf による保存を確認する。&lt;/p&gt;

&lt;p&gt;このプログラムでタイトルに漢字を設定したが、うまく表示されなければ
（豆腐になるならば）、日本語フォントの設定が必要である。&lt;/p&gt;

&lt;p&gt;まず、CentOS7 にインストールされているフォントを 
 fc-list | grep font  で確認して、日本語のフォントを見つける。&lt;/p&gt;

&lt;p&gt;/usr/share/fonts/vlgothic/VL-Gothic-Regular.ttf: VL ゴシック,VL Gothic:style=regular&lt;/p&gt;

&lt;p&gt;が見つかったので、これを利用する方法を示す。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Python 環境下で設定ファイルのパスを確認&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib
matplotlib.matplotlib_fname()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ファイル名：  ‘/usr/local/python3/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc’  を得た。&lt;br /&gt;
2. Python 環境下で matplotlib に設定されているフォント名を確認&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;matplotlib.rcParams.get(&amp;#39;font.family&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;フォント名：  [‘sans-serif’]  を得た。&lt;br /&gt;
3. Python 環境下で matplotlib が利用可能なフォントのリストを表示させる&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib.font_manager as fm
fm.findSystemFonts()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;フォントファイル：  ‘/usr/share/fonts/vlgothic/VL-Gothic-Regular.ttf’&lt;br /&gt;
など日本語フォントがあることを確認しておく。&lt;br /&gt;
4. 存在を確認した設定ファイル matplotlibrc をユーザのホームの .cache/matplotlib フォルダにコピーする&lt;br /&gt;
コピーした matplotlibrc に以下の２行を加える（フォント名にスペースが含まれているが、クォーテーションは不要）。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;font.serif : VL Gothic
font.sans-serif : VL Gothic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;また、’pdf backend params’ のところで、pdf.fonttype がコメントアウトされているのを&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pdf.fonttype : 42&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;と TrueType を有効にしておく。&lt;br /&gt;
5. ~/.cache/matplotlib フォルダには、 fontList.py3k.cache, tex.cache の２ファイルと、追加した matplotlibrc が存在するが、matplotlibrc を修正後、fontList.py3k.cache を削除しておく。&lt;/p&gt;

&lt;p&gt;python3 を立ち上げ、matplotlib をインポートして cache を再作成させて
（または $ fc-cache -fv を実行して）動作を確認する。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(日本語フォント).ttf ファイルを入手した場合、&lt;br /&gt;
1. /usr/share/fonts/japanese のディレクトリを作成し、そこに (日本語フォント).ttf をコピーする。&lt;br /&gt;
2.   $ fc-cache -fv によってフォントのキャッシュを更新すると、
ホームディレクトリの .cache ディレクトリ内のデータが更新される。&lt;br /&gt;
3. フォントを指定して matplotlib を利用する Python サンプルプログラム&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import matplotlib
import matplotlib.font_manager as font_manager
#TTFファイル(フォント)のアドレスを指定
font_path = &amp;#39;/usr/share/fonts/japanese/(日本語フォント).ttf&amp;#39;
#フォントの詳細情報を取得
font_prop = font_manager.FontProperties(fname = font_path)
#フォントの名前を使い、matplotのデフォルトフォントに指定
fname = font_prop.get_name()
print(fname)
matplotlib.rcParams[&amp;#39;font.family&amp;#39;] = fname

import matplotlib.pyplot as plt

plt.plot([1, 3, 2, 4])
plt.title(&amp;#39;タイトル&amp;#39;)
plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 04 May 2016 17:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing Jupyter to CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/python/jupyter/Jupyter.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/python/jupyter/Jupyter.html</guid>
        <description>&lt;p&gt;CentOS7 上の Python3 で Jypyter をインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CentOS7 で Python3 は導入済とする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jupyter のインストール&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# pip3 install jupyter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;関連記事： 
&lt;a href=&quot;/tech/centos7/python/matplotlib/Python-matplotlib.html&quot;&gt;matplotlib のインストール&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 16:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>PythonベースのWebアプリとして R を動作させる方法</title>
        <link>http://NaokiMizutani.github.io/tech/python/apache/r/Python-R-Webapp.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/apache/r/Python-R-Webapp.html</guid>
        <description>&lt;p&gt;PypeR を用いて、サーバー側で R が動く Python ベースの Webアプリケーション (CentOS7)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CentOS7 に Apache, Python3, mod_wsgi, R, PypeR はインストールされて動作しているものとする
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/install/PythonToCentOS7.html&quot;&gt;Python3 のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/apache/Apache_Python3.html&quot;&gt;Apache/mod_wsgi のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/centos7/r/install/Install-R.html&quot;&gt;R のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/tech/python/r/PypeR.html&quot;&gt;PypeR のインストール&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;R のサンプルプログラム (R コンソールで動作するソース)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a &amp;lt;- c(2,3,4,5)
summary(a)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Webアプリケーションとしての Pythonファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/usr/local/python35/bin/python3

import pyper as pr

def application(environ, start_response):
    start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain&amp;#39;)])

    r = pr.R()
    r(&amp;quot;a &amp;lt;- c(2, 3, 4, 5, 6)&amp;quot;)
    text = r(&amp;quot;summary(a)&amp;quot;)

    return [text.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 04 May 2016 08:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Installing R to CentOS7</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/r/install/Install-R.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/r/install/Install-R.html</guid>
        <description>&lt;p&gt;CentOS7 への R のインストール&lt;/p&gt;

&lt;p&gt;基本的に yum でインストールできるようだが、epel のレポジトリ登録が必要になる。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum install epel-release
# yum install R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;同様の方法として、(http://ftp.riken.jp/Linux/fedora/epel/7/x86_64/e/) を閲覧し、一覧の中から epel-release-7-?.noarch.rpm の最新版のファイル名を探して、&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# rpm -ihv http://ftp.riken.jp/Linux/fedora/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
# yum -y install R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;を実行する方法もある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/&quot;&gt;R Project/CRAN サイト&lt;/a&gt; から、Mac用 および Windows用実行イメージはダウンロードできるが、Linuxは 各ディストリビューションのパッケージ管理サービスに依存する。&lt;/p&gt;

</description>
        <pubDate>Wed, 04 May 2016 07:30:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
