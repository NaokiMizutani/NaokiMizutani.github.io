<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>N.Mizutani</title>
    <atom:link href="http://NaokiMizutani.github.io/tech/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://NaokiMizutani.github.io/tech/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Fri, 24 Jun 2016 19:36:27 +0900</pubDate>
    
      <item>
        <title>rChart （R の可視化ライブラリ）の使い方</title>
        <link>http://NaokiMizutani.github.io/tech/r/rcharts/highcharts/Rcharts.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/r/rcharts/highcharts/Rcharts.html</guid>
        <description>&lt;p&gt;&lt;a href=&quot;http://ramnathv.github.io/rCharts/&quot;&gt;rChart&lt;/a&gt; は、R からグラフを作成し、
特にブラウザ上に表示することを可能にする可視化ライブラリである。
R から代表的な javascript 可視化ライブラリ（Highcharts, Polychart, NVD3 など）を 
呼び出すインタフェース的役割を担う。
rCharts パッケージを利用する方法について解説する。&lt;/p&gt;

&lt;h2 id=&quot;rcharts-&quot;&gt;rCharts のインストール&lt;/h2&gt;

&lt;p&gt;rCharts は github に公開されており、 CRAN で管理されていないので、 devtools パッケージを
用いて github からインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(devtools)
install_github(&#39;rCharts&#39;, &#39;ramnathv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rcharts--1&quot;&gt;rCharts のデモ&lt;/h2&gt;

&lt;p&gt;rCharts のサイトに掲載されているデモプログラムを４種示す。
R コンソールで rCharts ライブラリを読み込んで、下記コードをタイプするとグラフがブラウザに表示される。&lt;/p&gt;

&lt;p&gt;・デモ１&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;names(iris) = gsub(&quot;\\.&quot;, &quot;&quot;, names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = &#39;Species&#39;, type = &#39;point&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;・デモ２&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = &#39;Eye&#39;, data = hair_eye, type = &#39;bar&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;・NVD3 を使ったデモ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hair_eye_male &amp;lt;- subset(as.data.frame(HairEyeColor), Sex == &quot;Male&quot;)
n1 &amp;lt;- nPlot(Freq ~ Hair, group = &quot;Eye&quot;, data = hair_eye_male, type = &quot;multiBarChart&quot;)
n1$show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;・Highcharts を使ったデモ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1 &amp;lt;- hPlot(x = &quot;Wr.Hnd&quot;, y = &quot;NW.Hnd&quot;, data = MASS::survey, type = c(&quot;line&quot;, 
    &quot;bubble&quot;, &quot;scatter&quot;), group = &quot;Clap&quot;, size = &quot;Age&quot;)
h1$show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rcharts--2&quot;&gt;rCharts ギャラリー、サンプルプログラム&lt;/h2&gt;

&lt;p&gt;rCharts はグラフ描画のために Javascript グラフ描画パッケージを用いるが、
幾つかのグラフ描画 Javascript パッケージの中から利用したいものを選択して利用する。&lt;/p&gt;

&lt;p&gt;まず、 &lt;a href=&quot;http://rcharts.io/gallery/&quot;&gt;rCharts のギャラリー・ページ&lt;/a&gt; には、
多数のグラフサンプルが掲載されており、どのようなグラフが描画できるか確認できる。&lt;/p&gt;

&lt;p&gt;また、利用したいグラフ描画パッケージごとにサンプルプログラムが
&lt;a href=&quot;https://github.com/ramnathv/rCharts/tree/master/inst/libraries&quot;&gt;Github, rChart サイト&lt;/a&gt; に
公開されている。&lt;/p&gt;

&lt;h2 id=&quot;rchartshighcharts-&quot;&gt;rCharts/HighCharts サンプルプログラム&lt;/h2&gt;

&lt;p&gt;Javascript グラフライブラリの中で、評価の高い &lt;a href=&quot;http://www.highcharts.com/&quot;&gt;HighCharts&lt;/a&gt; で
描くことを前提に rCharts の利用を試みる。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# rCharts サンプルプログラム

# rCharts 利用の際にはライブラリ読み込みを行う。

require(&amp;quot;rCharts&amp;quot;)

# sin曲線と cos曲線をグラフに表示することを目標とする。
# それぞれのデータを作成するために、
# まず x 座標の数列を作成して変数 xdata に入れるとともに、
# その個数を変数 nsize に入れる。

xdata &amp;lt;- seq(-1.0, 7.01, by=0.1)
nsize &amp;lt;- length(xdata)

# x の値を示す数列データ xdata のそれぞれの値に対応する 
# sin(x) の値でできた数列データを sindata, 
# xdata のそれぞれの値に対応する cos(x) の値でできた数列データを
# cosdata とする。

sindata &amp;lt;- sin(xdata)
cosdata &amp;lt;- cos(xdata)

# プロットするためのデータを data.frame 形式で作成する。
# sin曲線上の (x, y) の値を nsize 個、cos曲線上の (x, y) の値を nsize 個、
# そして、それぞれの前に sin データか cos データかを示すラベルをつけ、
# それらを結合させてデータフレームを作成する。
# データフレーム data の内容イメージを後に表として示す。

data &amp;lt;- rbind( data.frame(type=rep(&amp;quot;sin&amp;quot;, nsize), x = xdata, y = sindata),
              data.frame(type=rep(&amp;quot;cos&amp;quot;, nsize), x = xdata, y = cosdata) )

# データフレーム data の x, y を、HighCharts によってグラフ化する。
# 各種の詳細設定を指定は、HighCharts での Javascript の形式を下記のように書き換えて指定する。

p &amp;lt;- hPlot(y~x, group=&amp;quot;type&amp;quot;, data=data, type = &amp;#39;line&amp;#39;, title = &amp;#39;三角関数&amp;#39;, subtitle = &amp;#39;rCharts/HighCharts Demo&amp;#39;)
p$chart(zoomType = &amp;quot;xy&amp;quot;)
p$exporting(enabled = T)
p$xAxis(title = list(text = &amp;quot;x&amp;quot;), min = -1.0, max = 7.0, gridLineWidth = 1)
p$yAxis(title = list(text = &amp;quot;y = sin(x), y = cos(x)&amp;quot;), min = -1.2, max = 1.2, gridLineWidth = 1)
p$plotOptions(line = list(marker = list(enabled = F), enableMouseTracking = F))
p$legend(align = &amp;#39;right&amp;#39;, verticalAlign = &amp;#39;middle&amp;#39;, layout = &amp;#39;vertical&amp;#39;)
p$show()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;データフレーム data の内容イメージは下記の表のとおりである。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;x&lt;/th&gt;
      &lt;th&gt;y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“sin”&lt;/td&gt;
      &lt;td&gt;-1.0&lt;/td&gt;
      &lt;td&gt;-0.345&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“cos”&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;http://news.infoseek.co.jp/article/codezine_7383/&quot;&gt;rCharts の簡単な紹介&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codezine.jp/article/detail/7383&quot;&gt;Codezine への掲載記事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech-sketch.jp/2013/09/datavisualization-with-rcharts.html&quot;&gt;rCharts の解説記事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kohske.github.io/ESTRELA/201407/index.html&quot;&gt;rCharts の基礎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rstudio-pubs-static.s3.amazonaws.com/12409_1fe45c5349a64f05ac602405205aa7d2.html&quot;&gt;rCharts/HighCharts の実例&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 08:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Shiny Server のインストールと運用</title>
        <link>http://NaokiMizutani.github.io/tech/shiny/server/Shiny-Server.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/shiny/server/Shiny-Server.html</guid>
        <description>&lt;p&gt;Shiny には、スタンドアロン版とサーバー版が存在する。
そのうち、サーバー版のインストールと運用開始について説明する。&lt;/p&gt;

&lt;h1 id=&quot;shiny-server-&quot;&gt;Shiny Server のインストール&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rstudio.com/products/shiny/shiny-server/&quot;&gt;Shiny Server サイト&lt;/a&gt; をみると、
Open Source版 と Pro版（有料） が存在することが分かる。
Open Source版についての説明をみると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 12.04 or later&lt;/li&gt;
  &lt;li&gt;RedHat/CentOS&lt;/li&gt;
  &lt;li&gt;SLES 11+&lt;/li&gt;
  &lt;li&gt;Other Platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4種のインストール方法（うち上3種に対してバイナリを提供）が示されている。
そのうち、 CentOS 7 へのインストールを試みた。&lt;/p&gt;

&lt;h2 id=&quot;centos-7-&quot;&gt;CentOS 7 へのインストール&lt;/h2&gt;

&lt;p&gt;まず、環境として R がインストールされていることが前提である。これは &lt;code&gt;yum install R&lt;/code&gt; で
実行できる。&lt;/p&gt;

&lt;p&gt;また、Shiny パッケージのダウンロードもできている必要があり、Shiny-Server サイトでは&lt;/p&gt;

&lt;p&gt;$ sudo su - \
-c “R -e &quot;install.packages(‘shiny’, repos=’https://cran.rstudio.com/’)&quot;”&lt;/p&gt;

&lt;p&gt;のように必要なコマンドが示されている。
このコマンドでは、R を管理者で実行してパッケージをインストールしているので、
共用領域に shiny パッケージが保存されている必要があると考えられる。&lt;/p&gt;

&lt;p&gt;Shiny Server のダウンロードとインストールは以下のコマンドによる。&lt;/p&gt;

&lt;p&gt;$ wget https://download3.rstudio.org/centos5.9/x86_64/shiny-server-1.4.2.786-rh5-x86_64.rpm
$ sudo yum install –nogpgcheck shiny-server-1.4.2.786-rh5-x86_64.rpm&lt;/p&gt;

&lt;h1 id=&quot;shiny-server--1&quot;&gt;Shiny Server の起動&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;動作の確認&lt;/h2&gt;

&lt;p&gt;Shiny Server の起動／停止は &lt;code&gt;systemctl start shiny-server&lt;/code&gt;, &lt;code&gt;systemctl stop shiny-server&lt;/code&gt; 
で行う。
ブラウザで自アドレスをポート番号 3838 でアクセス (http://address:3838) して、
/srv/shiny-server/index.html が表示されていれば成功である。
外部からのアクセスを試すには、ファイアーウォールを処置しておく。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;アプリケーションの配置&lt;/h2&gt;

&lt;p&gt;スタンドアロン版 Shiny で作成したプロジェクトは、フォルダごと /srv/shiny-server/ 下におく。
そして、アプリ名が “01_hello” の場合、http://address:3838/01_hello/ でアクセスする。
また、ポート番号を 3838 以外のポートで起動させたい場合には、
 /etc/shiny-server/shiny-server.conf 
ファイルに使用するポート番号指定の記述箇所があるので変更して再起動をかける。&lt;/p&gt;

&lt;h1 id=&quot;shiny-&quot;&gt;スタンドアロン Shiny で他からアクセスできるようにする方法&lt;/h1&gt;

&lt;p&gt;Shiny アプリケーションを Rstudio から Run App で起動すると、
Console にアクセスすべきホストアドレスとポート番号が表示される。&lt;/p&gt;

&lt;p&gt;次に Console で runApp(host=”ip-address”) として起動すると、
外部から http://ip-address:ポート番号 でアクセスできる。&lt;/p&gt;

&lt;p&gt;もちろん、ファイアーウォールを処置しておく必要がある。&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Jun 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>R Markdown を用いた文書作成</title>
        <link>http://NaokiMizutani.github.io/tech/rstudio/markdown/Rstudio-Rmarkdown.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/rstudio/markdown/Rstudio-Rmarkdown.html</guid>
        <description>&lt;p&gt;rmarkdown パッケージを利用して、 R markdown 形式のテキスト作成を通じたドキュメント作成方法
について解説する。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;必要なコンポーネント&lt;/h1&gt;

&lt;p&gt;R markdown を利用するために必要となるコンポーネントは、 R の環境と、rmarkdown パッケージ、
そして Pandoc 関連ツールである。&lt;/p&gt;

&lt;p&gt;また、 pdf出力を機能させるには、 LaTeX 環境が必要となる。&lt;/p&gt;

&lt;p&gt;この説明では、Rstudio が動作する環境のもとで、R markdown が最低限利用できる環境の構築
（rmarkdownパッケージの導入 と Pandoc の導入）を紹介する。&lt;/p&gt;

&lt;h2 id=&quot;pandoc&quot;&gt;Pandoc（文書形式変換ツール）のインストール&lt;/h2&gt;

&lt;p&gt;Linux(CentOS), Mac, Windows のそれぞれについて、Pandoc のインストール方法を述べる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[CentOS] # yum install pandoc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Mac OSX] $ brew install pandoc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Windows] &lt;a href=&quot;http://pandoc.org/installing.html#windows&quot;&gt;Pandoc サイト&lt;/a&gt; から
インストーラをダウンロードしてインストールする。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;利用可能状況かどうかの確認&lt;/h2&gt;

&lt;p&gt;Rstudio のコンソールで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(rmarkdown)  
pandoc_available()  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、TRUE が表示されることを確認する。&lt;/p&gt;

&lt;p&gt;エラーが出る場合は、Pandoc 利用のためのパスの設定に問題がある可能性が高い。&lt;/p&gt;

&lt;h1 id=&quot;r-markdown-&quot;&gt;R markdown の利用&lt;/h1&gt;

&lt;p&gt;Rstudio で新規に R Markdown形式のファイルを作成する。
ダイアログで作成の際、Document のタイプで Output Format を HTML とする。&lt;/p&gt;

&lt;p&gt;デモのための markdown 文書が表示される。この文書を整形表示するには、エディタツールバーの
‘Knit HTML’ ボタンを押して、ファイル名を確定すると専用ブラウザが開いて表示が行われる。&lt;/p&gt;

&lt;p&gt;漢字が含まれるテキストの場合、保存する際に漢字コードを尋ねてくるので、’UTF8’ を選択する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gihyo.jp/admin/serial/01/r-markdown/&quot;&gt;技術評論社による紹介&lt;/a&gt; ページが参考になる。&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Jun 2016 14:30:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Jupyter notebook での pdf 出力</title>
        <link>http://NaokiMizutani.github.io/tech/jupyter/pdf/Jupyter-PDF.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/jupyter/pdf/Jupyter-PDF.html</guid>
        <description>&lt;p&gt;Jupyter notebook には Fileタブの Download as カテゴリに PDF via LaTeX の
選択肢がある。
ところが、この機能は pandoc や LaTeX をインストールしないと動作しない。
Jupyter のノートを PDF化する方法について説明する。&lt;/p&gt;

&lt;h2 id=&quot;latex-&quot;&gt;LaTeX の動作確認&lt;/h2&gt;

&lt;p&gt;Jupyter notebook で PDFを出力するには、LaTeX を使うので、
LaTeX が動作するように整備しておく必要がある。
特に、日本語が出るところまで動作を確認しておく。&lt;/p&gt;

&lt;h2 id=&quot;pandoc-&quot;&gt;Pandoc について&lt;/h2&gt;

&lt;p&gt;ノートブックに Markdownタイプのセルが1つもなければ PDFファイルは
作成されるはずである。
ところが、 Markdownタイプのセルがあると次のようなエラーが表示される。
これは、日本語の有無の問題ではない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nbconvert failed: Pandoc wasn&#39;t found.  
Please check that pandoc is installed:  
http://johnmacfarlane.net/pandoc/installing.html  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pandoc とは、ドキュメント変換ツールで、Markdown, HTML, LaTeX などの形式を
Word, PDF, Markdown, HTML などに変換する機能をもち、
コマンドラインツールとして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc -o output.html input.txt  
pandoc 01_hoge.md 02_fuga.md -o test.pdf -V documentclass=ltjarticle --latex-engine=lualatex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように利用するものである。&lt;/p&gt;

&lt;p&gt;Pandoc については、&lt;a href=&quot;http://pandoc.org/README.html&quot;&gt;ユーザガイド&lt;/a&gt; に
詳しい説明がある。&lt;/p&gt;

&lt;h2 id=&quot;pandoc--1&quot;&gt;Pandoc のインストール&lt;/h2&gt;

&lt;p&gt;Pandoc のインストール方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anaconda で Jupyter を導入した場合 :   &lt;code&gt;conda install pandoc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Mac の場合、Homebrew を用いる :   &lt;code&gt;brew install pandoc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux(Redhat系) :   &lt;code&gt;yum install pandoc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Linux(Debian系) :   &lt;code&gt;apt-get install pandoc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで、日本語が含まれないノートブックは pdf化に成功するはずである。
日本語が入ったノートブックは（日本語が Markdown タイプのセルに入っても code タイプのセルに入っても）、
PDF への変換で &lt;code&gt;nbconvert failed: PDF creating failed&lt;/code&gt; と表示されてエラーとなる。
PDF化する際に latex を経由するが、そのときに使われるスタイルファイルが日本語に対応しないためと
考えられる。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;日本語用テンプレートファイルの準備&lt;/h2&gt;

&lt;p&gt;ディレクトリ &lt;code&gt;PYTHONDIR/site-packages/nbconvert/templates/latex/&lt;/code&gt; にある
&lt;code&gt;*.tplx&lt;/code&gt; ファイルの中で、
nbconvert がデフォルトで使うテンプレートファイルが &lt;code&gt;article.tplx&lt;/code&gt; のようで、
このファイルの中で LaTeX が使うスタイルファイルが記されている。&lt;/p&gt;

&lt;p&gt;この &lt;code&gt;article.tplx&lt;/code&gt; ファイルの内容が&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`\documentclass{article}` となっているのを、  
`\documentclass{jsarticle}`   
`\documentclass{ltjsarticle}` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などに変更しておく。&lt;/p&gt;

&lt;h2 id=&quot;pdf&quot;&gt;PDF化の方法&lt;/h2&gt;

&lt;p&gt;コマンドラインで nbconvert を使って PDF化する方法は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jupyter nbconvert Untitled.ipynb --to pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;であり、以下のようなメッセージが表示される。（pdflatex が実行されていることが分かる。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NbConvertApp] Converting notebook Untitled.ipynb to pdf
[NbConvertApp] Writing 14233 bytes to notebook.tex
[NbConvertApp] Building PDF
[NbConvertApp] Running pdflatex 3 times: [&#39;pdflatex&#39;, &#39;notebook.tex&#39;]
[NbConvertApp] PDF successfully created
[NbConvertApp] Writing 54725 bytes to Untitled.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先程のテンプレートをユーザが作成して、それを指定して変換するには、
    &lt;code&gt;jupyter nbconvert --to latex --template jsarticle.tplx [ファイル名].ipynb&lt;/code&gt;
とする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://texwiki.texjp.org/?%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E8%B3%AA%E5%95%8F#cb7a8a28&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;日本語が含まれるノートを PDF化するには、Jupyter の中からは難しく（実行されるスクリプトの変更方法が不明で）、
次のように3段階に分けて、ターミナルで行う道筋をみつけた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;texファイルの生成&lt;/p&gt;

    &lt;p&gt;jupyter nbconvert –to latex (–template article.tplx) jupyter_note.ipynb&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dviへの変換&lt;/p&gt;

    &lt;p&gt;platex jupyter_note.tex&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pdfへの変換&lt;/p&gt;

    &lt;p&gt;dvipdfmx jupyter_note.dvi&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、カッコ内のテンプレートファイルの指定は、必要に応じて行う。&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Jun 2016 12:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>日本語LaTeX環境の構築</title>
        <link>http://NaokiMizutani.github.io/tech/latex/install/LaTeX-Japanese.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/latex/install/LaTeX-Japanese.html</guid>
        <description>&lt;p&gt;Linux(Cent OS) で TeX 環境を構築する方法には、いくつかの方法がある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;パッケージ管理システム (yum) を使う方法&lt;/li&gt;
  &lt;li&gt;TeX Live のインストーラを使う方法
    &lt;ul&gt;
      &lt;li&gt;ネットワーク経由（通信障害を経験し、成功に至っていない。）&lt;/li&gt;
      &lt;li&gt;ISOイメージを用いる方法（インストール経験あり。）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。
上手くいった ISOイメージを用いる方法を中心に説明する。&lt;/p&gt;

&lt;h2 id=&quot;tex-live-iso-&quot;&gt;TeX Live のインストール（ISO イメージ）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ctan.org/&quot;&gt;CTAN&lt;/a&gt; からたどって 
&lt;a href=&quot;http://tug.org/texlive/acquire-iso.html&quot;&gt;TeX Live (ISO)&lt;/a&gt; で
ダウンロード先を選んで isoファイルをダウンロードする。
今回のダウンロード・ファイルは以下のファイル（約30分）&lt;/p&gt;

&lt;p&gt;ftp://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/Images/texlive.iso (2015.6.20)&lt;/p&gt;

&lt;p&gt;ダウンロードが完了したら、/var/tmp に iso ファイルをコピーし、そこで root で作業をする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;空ディレクトリ /var/tmp/texlive2015 を作成して、&lt;/p&gt;

    &lt;p&gt;# mount -o loop -t iso9660 texlive.iso texlive2015&lt;br /&gt;
  mount: /dev/loop0 is write-protected, mounting read-only&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;マウントできたか確認する。&lt;/p&gt;

    &lt;p&gt;# ls -lha texlive2015&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;マウントされているディレクトリにある &lt;code&gt;install-tl&lt;/code&gt; を実行し、
Enter command: のプロンプトに対しては I を入力する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;インストールメッセージの最後のメッセージにしたがって PATH を設定する。&lt;/p&gt;

    &lt;p&gt;Add /usr/local/texlive/2015/texmf-dist/doc/info to INFOPATH.&lt;br /&gt;
  Add /usr/local/texlive/2015/texmf-dist/doc/man to MANPATH&lt;br /&gt;
    (if not dynamically found).&lt;/p&gt;

    &lt;p&gt;Most importantly, add /usr/local/texlive/2015/bin/x86_64-linux&lt;br /&gt;
  to your PATH for current and future sessions.&lt;/p&gt;

    &lt;p&gt;Welcome to TeX Live!
  Logfile: /usr/local/texlive/2015/install-tl.log&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;.bashrc に以下の行を追加して &lt;code&gt;source .bashrc&lt;/code&gt; を実行する
（.bash_profile のほうがよいかも）&lt;/p&gt;

    &lt;p&gt;# set PATHs for TeX Live 2015&lt;br /&gt;
  export INFOPATH=/usr/local/texlive/2015/texmf-dist/doc/info:$INFOPATH
  export MANPATH=/usr/local/texlive/2015/texmf-dist/doc/man:$MANPATH
  export PATH=/usr/local/texlive/2015/bin/x86_64-linux:$PATH&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;動作を確認する。&lt;/p&gt;

    &lt;p&gt;$ platex -v&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;後作業を行う。&lt;/p&gt;

    &lt;p&gt;# cd /usr/local/texlive/2015&lt;br /&gt;
  # ln -s texmf-dist texmf&lt;/p&gt;

    &lt;p&gt;# tlmgr –repository=http://www.tug.org/~preining/tlptexlive/ install pxdvi&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ghost View のインストール&lt;/p&gt;

    &lt;p&gt;# yum -y install epel-release&lt;br /&gt;
  # yum -y install gv&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tex-live-&quot;&gt;TeX Live のインストール(ネットワーク経由)&lt;/h2&gt;

&lt;p&gt;ネットワーク経由のインストールは1回試しただけであるが、通信のトラブルがおきて
インストールまで至らなかった。
ISOイメージを用いる方法を勧める。&lt;/p&gt;

&lt;p&gt;https://www.tug.org/texlive/ にて TexLive の状況の確認&lt;/p&gt;

&lt;p&gt;ダウンロードするインストーラを確認する。
（このインストーラによる方法では、必要コンポーネントごとにダウンロードを繰り返す。）&lt;/p&gt;

&lt;p&gt;http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz&lt;/p&gt;

&lt;p&gt;ダウンロードしたファイルを /var/tmp あたりに移動する。&lt;br /&gt;
（/var/tmp にて $ wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz としてもよい。）
以下 /var/tmp で作業する。&lt;/p&gt;

&lt;p&gt;$ tar zxvf install-tl-unx.tar.gz&lt;/p&gt;

&lt;p&gt;展開すると、install-tl-yyyymmdd というディレクトリが作成されており、その中で root で作業する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ./install-tl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter command: のプロンプトに対して ‘I’ を入力する。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tex-&quot;&gt;TeX のアップデート&lt;/h2&gt;
&lt;p&gt;（各種パッケージの更新／新パッケージの自動インストール）&lt;/p&gt;

&lt;p&gt;これは、再インストールに近い動作で時間がかかる..2h?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unknown directive …containerchecksum c59200574a316416a23695c258……
2716955… , please fix it! at /usr/local/texlive/2015/tlpkg/TeXLive/TLPOBJ.pm line 210, &amp;lt;$retfh&amp;gt; line 5579.&lt;/p&gt;

&lt;p&gt;とエラーが表示されて進行しない場合には、&lt;br /&gt;
    http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet/&lt;br /&gt;
から &lt;code&gt;update-tlmgr-latest.sh&lt;/code&gt; 等 適切なものをダウンロードして実行してから更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sh update-tlmgr-latest.sh
# tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ipa&quot;&gt;IPAフォントのインストール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;フォントのダウンロード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://ipafont.ipa.go.jp/node17#jp&quot;&gt;IPAフォントのダウンロードサイト(新)&lt;/a&gt; から
IPAexフォント(IPAexfont00301.zip 9.21MB 2files)、&lt;br /&gt;
&lt;a href=&quot;http://ipafont.ipa.go.jp/old/ipafont/download.html&quot;&gt;IPAフォントのダウンロードサイト(旧)&lt;/a&gt; から
IPAフォント4書体パック(IPAfont00303.zip 19.1 MB 4files)&lt;br /&gt;
をダウンロードする。&lt;/p&gt;

&lt;p&gt;圧縮された zipファイルを &lt;code&gt;$ unzip fontfile.zip&lt;/code&gt; として解凍し、
解凍したファイル群(2+4files)を /usr/share/fonts/japanese/TrueType という
ディレクトリを作成して、そこに入れる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;フォントリストの更新 および 確認&lt;/p&gt;

    &lt;p&gt;# fc-cache -fv      （フォントリストの更新）&lt;/p&gt;

    &lt;p&gt;$ fc-list | sort     （登録されたフォントの確認）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;埋め込む日本語フォントの設定&lt;/h2&gt;

&lt;p&gt;dvipdfmx で、pdf に埋め込む日本語フォントを特定のものに指定したり自動指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(例) $ kanji-config-updmap status  
(例) $ kanji-config-updmap hiragino

sudo kanji-config-updmap-sys (fontname or auto or nofont)

# kanji-config-updmap-sys auto     （これを実行）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォント埋め込みの設定状況を表示させる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kanji-config-updmap status
CURRENT family : ipaex
Standby family : ipa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://user.ecc.u-tokyo.ac.jp/users/user-15826/wiki/?TeX/Install&quot;&gt;参考1&lt;/a&gt;
&lt;a href=&quot;http://qiita.com/Tats_U_/items/01d48eb70a8b359b0d95&quot;&gt;参考2&lt;/a&gt;
&lt;a href=&quot;http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/embed_hiragino.html&quot;&gt;参考3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;latex-&quot;&gt;LaTeX のテスト&lt;/h2&gt;

&lt;p&gt;下記サンプルのような tex ファイルを作成し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\documentclass{jsarticle}
\begin{document}
    アインシュタインは $E = mc^2$ と言った。
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次の流れで pdf化が成功するかチェックする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ platex filename.tex
$ dvipdfmx filename.dvi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;漢字が含まれたtexファイルも pdf化することを確認した。&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Jun 2016 11:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Anaconda を用いた R 対応 Jupyter の導入</title>
        <link>http://NaokiMizutani.github.io/tech/jupyter/r/windows/Anaconda-Win.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/jupyter/r/windows/Anaconda-Win.html</guid>
        <description>&lt;p&gt;プログラミングを行う環境（ツール）として、
コンパイラ・テキストエディタ・デバッガなどをまとめ GUI から利用できる統合開発環境 (IDE) が、
大抵のコンピュータ言語で整備されるようになっている。
R (1997〜)においても、標準で導入される GUI に加えて、RStudio (2010〜)が
統合開発環境の地位を確立しつつある。&lt;/p&gt;

&lt;p&gt;一方、特にスクリプト言語において、対話実行環境 (REPL: Read-Eval-Print-Loop) の有用性が指摘されている。
R 用の対話実行環境としては、 Jupyter (Julia, Python, R 等の複数言語に適用可) が一例として挙げられる。
R を用いたデータサイエンスの実作業においては、プログラムのプロトタイプの作成、
試行した実行結果の評価、ドキュメントを作成、他の者と情報を共有 などが繰り返される。
Jupyter の対話実行環境は、それら作業をサポートする機能を有しており、
生産性向上の一助になるツールである。&lt;/p&gt;

&lt;h2 id=&quot;jupyter--windows-&quot;&gt;Jupyter の Windows への導入方法&lt;/h2&gt;

&lt;p&gt;R の実行環境としての Jupyter を Windows機に導入する方法としていくつかの方法があるが、
最も簡単な方法は Jupyter を動かすための必要パーツを一括してインストールしてくれる
パッケージ Anaconda を利用することである。&lt;/p&gt;

&lt;p&gt;以下、Windows機を対象に、Jupyter の対話型実行環境を利用可能にする方法として、
パッケージ Anaconda を導入して利用する手順を説明する。&lt;/p&gt;

&lt;h3 id=&quot;anaconda---r&quot;&gt;Anaconda のインストール と R用カスタマイズ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.continuum.io/&quot;&gt;Continuum&lt;/a&gt; サイトの Anaconda/Download ページで、
Python 3.5 / Windows 64-Bit のインストーラーをダウンロードする。&lt;br /&gt;
（Company Email アドレスを入力するように促されるが、No Thanks ボタンを押せば良い。）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ダウンロードしたインストーラーをダブルクリックして、デフォルトでインストールする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows のスタートメニューにいくつかのアイコンが追加されるはずなので、その中で Jupyter Notebook の
動作を確認して終了する。&lt;br /&gt;
（ブラウザを終了して、プロンプトウィンドウで ctrl-c を押して抜ける。）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jupyter で R が動作するようカスタマイズする。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Windows のスタートメニューのアイコンから、Anaconda Prompt を立ち上げる。&lt;/li&gt;
      &lt;li&gt;そのコンソール画面で、&lt;code&gt;conda install -c r r-essentials&lt;/code&gt; と打ち込む。&lt;/li&gt;
      &lt;li&gt;ダウンロード、インストールされるパッケージのリストが表示され、確認が促されるので ‘y’ を入力する。&lt;br /&gt;
（最後のモジュール組み込みでエラーメッセージが出るが、completed と表示され実害はなさそうである。）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この R モジュールの組込みによって、GUI等のツールのない必要最小限の R がインストールされる。
Jupyter の中で install.packages() 関数は使えないので、
ライブラリをインストールするには、上記 R を立ち上げて
（Anaconda Prompt で &lt;code&gt;chcp 65001&lt;/code&gt; を実行してから &lt;code&gt;R&lt;/code&gt; と入力して）、
install.packages() 関数でインストールする。&lt;/p&gt;

&lt;p&gt;conda コマンドで組み込んだ必要最小限の R と、ユーザがインストールした R とが共存した場合に起きる
トラブル発生（ライブラリ保存場所が複数となっておきる問題）については未確認である。&lt;/p&gt;

&lt;p&gt;なお、R をインストールして、その中から IRkernel をインストールする方法は Windows/Anaconda では
うまくいかなかった。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 05:08:00 +0900</pubDate>
      </item>
    
      <item>
        <title>R, RStudio, Shiny のインストール</title>
        <link>http://NaokiMizutani.github.io/tech/r,/rstudio,/shiny/R-RStudio-Shiny.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/r,/rstudio,/shiny/R-RStudio-Shiny.html</guid>
        <description>&lt;p&gt;CentOS7 への R, RStudio, Shiny のインストールについてのメモ&lt;/p&gt;

&lt;h1 id=&quot;r-&quot;&gt;R のインストール&lt;/h1&gt;

&lt;p&gt;【方法１】&lt;/p&gt;

&lt;p&gt;基本的に yum でインストールできるようだが、 epel のレポジトリを登録する必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum install epel-release
# yum install R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;【方法２】&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/&quot;&gt;CRANサイト&lt;/a&gt; のトップページに、
各OSへのダウンロードに関する説明へのリンクが貼られており、
Linux/redhat 用の Readme ファイルによると、以下のようにインストールを進めるとのことである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fedoraproject.org/wiki/EPEL&quot;&gt;EPELサイト&lt;/a&gt; で 
&lt;a href=&quot;https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&quot;&gt;newest ‘epel-release’ package for EL7&lt;/a&gt; を
確認する。&lt;/p&gt;

&lt;p&gt;その URI を用いて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# rpm -ihv https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
# yum install R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行する。&lt;/p&gt;

&lt;h1 id=&quot;rstudio-&quot;&gt;RStudio のインストール&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rstudio.com/products/rstudio/&quot;&gt;RStudioサイト&lt;/a&gt; のページで、
RStudio Desktop の Open Source Edition のダウンロードボタンを押し、
CentOS7 へのインストール用として、 Fedora/Redhat 用 64bit インストーラ rpmパッケージが
あることを確認する。&lt;/p&gt;

&lt;p&gt;その URI を用いて、
    # rpm -ivh https://download1.rstudio.org/rstudio-0.99.902-x86_64.rpm
でインストールできる。&lt;/p&gt;

&lt;p&gt;なお、
* rpm パッケージのインストールは、ルート権限で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`# rpm -ivh package.rpm`
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;インストールしたい RPM パッケージの古いバージョンが既にインストールされている場合は&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;# rpm -Uvh package.rpm&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ある RPM パッケージが既にインストールされているかどうかを調べる場合は&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;# rpm -q package&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使う。&lt;/p&gt;

&lt;p&gt;起動は、RStudio のアプリケーションアイコンが「開発」のところに入るので、そこから起動する。&lt;/p&gt;

&lt;h1 id=&quot;shiny-&quot;&gt;Shiny のインストール&lt;/h1&gt;

&lt;p&gt;R を root で起動し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&#39;shiny&#39;, repos=&#39;https://cran.rstudio.com/&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その他の方法として、RStudio の右下のサブウィンドウの ‘Packages’ タブで ‘Install’ ボタンを
押すことによって、ダイアログが開き、Packages 欄に ‘shiny’ と入力し、’Install dependencies’ に
チェックを入れると、依存関係にある必要なライブラリも導入される。&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2016 18:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>R と GitHub の連携</title>
        <link>http://NaokiMizutani.github.io/tech/r/github/R-GitHub.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/r/github/R-GitHub.html</guid>
        <description>&lt;p&gt;CRAN ではなく GitHub にも R の有用なライブラリが公開されている。
また、Shiny アプリケーションが公開されていることもある。
そこで、R で GitHub から ライブラリをインストール方法 および Shiny アプリケーションを実行する方法
を示す。
GitHub に公開されているライブラリを活用するには devtools という R のパッケージ操作支援ライブラリを
導入する必要がある。&lt;/p&gt;

&lt;h2 id=&quot;devtools--cran-&quot;&gt;devtools を CRAN からダウンロード&lt;/h2&gt;

&lt;p&gt;devtools がインストールされていなければ、CRAN からダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!require(&quot;devtools&quot;))  install.packages(&quot;devtools&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Linux で devtools のインストールでエラーが出る場合、下記を参照&lt;/p&gt;

&lt;h2 id=&quot;github-&quot;&gt;GitHub アカウントからのライブラリダウンロード&lt;/h2&gt;

&lt;p&gt;GitHub にも多くの有用な R のライブラリが公開されており、例えば &lt;a href=&quot;https://github.com/rstudio&quot;&gt;RStudio&lt;/a&gt; には
多くのライブラリ（R 以外のものもある）が存在することを確認できる。&lt;/p&gt;

&lt;p&gt;その中のライブラリ（rstudio/DT : Javascript で表を表示）をインストールする例を示す。
なお、このライブラリは、&lt;a href=&quot;https://github.com/rstudio/DT&quot;&gt;Rstudio/DT&lt;/a&gt; の README.md を読むと
CRAN からインストールできるようである。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GitHub からのインストール方法&lt;/p&gt;

    &lt;p&gt;devtools::install_github(‘rstudio/DT’)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github--shiny-&quot;&gt;GitHub からの Shiny アプリケーションを実行&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub に公開されている Shiny アプリケーションを RStudio で実行する方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub の User-name のところにあるプロジェクト名 Project-name を実行する場合は、
RStudio のコンソールで下記のようにコマンドを入力する。
ただし、ダウンロードして展開等するため、起動するまでにじばらく時間がかかる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!require(&#39;shiny&#39;)) install.packages(&quot;shiny&quot;)

shiny::runGitHub(&quot;Project-name&quot;, &quot;User-name&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（具体的事例）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shiny::runGitHub(&quot;ShinyDistributionsApp&quot;, &quot;ksmzn&quot;)
shiny::runGitHub(&quot;shiny-examples&quot;, &quot;rstudio&quot;, subdir = &quot;001-hello&quot;)
shiny::runGitHub(&quot;Irt_Web&quot;, &quot;NaokiMizutani&quot;, subdir = &quot;Shiny_v3&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;devtools-libcurl-&quot;&gt;devtools インストール時のエラー（libcurl のインストールが事前に必要）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&quot;devtools&quot;, verbose=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによれば、&lt;/p&gt;

&lt;p&gt;————————- ANTICONF ERROR —————————&lt;br /&gt;
Configuration failed because libcurl was not found. Try installing:&lt;br /&gt;
 * deb: libcurl4-openssl-dev (Debian, Ubuntu, etc)&lt;br /&gt;
 * rpm: libcurl-devel (Fedora, CentOS, RHEL)&lt;br /&gt;
 * csw: libcurl_dev (Solaris)&lt;br /&gt;
If libcurl is already installed, check that ‘pkg-config’ is in your&lt;br /&gt;
PATH and PKG_CONFIG_PATH contains a libcurl.pc file. If pkg-config&lt;br /&gt;
is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:&lt;br /&gt;
R CMD INSTALL –configure-vars=’INCLUDE_DIR=… LIB_DIR=…’  
——————————————————————–&lt;/p&gt;

&lt;p&gt;と出力されているので、
    # yum install libcurl-devel
を実行する。&lt;br /&gt;
このあと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&quot;devtools&quot;, verbose=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して成功した。&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2016 10:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Visual Studio Code のインストールと設定</title>
        <link>http://NaokiMizutani.github.io/tech/vscode/install/VScode-Install.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/vscode/install/VScode-Install.html</guid>
        <description>&lt;p&gt;Visual Studio Code のインストール と 設定初歩&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;h3 id=&quot;centos7-&quot;&gt;CentOS7 へのインストール&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.visualstudio.com/ja-jp/products/code-vs.aspx&quot;&gt;Visual Studio Code&lt;/a&gt;
の
&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;ダウンロードサイト&lt;/a&gt; から、
CentOS にインストールするための.rpm パッケージを選択してダウンロードする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rpm ファイルを /var/tmp あたりに移動し、そこを作業ディレクトリとして、&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  # yum localinstall rpmパッケージファイル名
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;によってインストールする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デスクトップのスタートボタンには、アプリケーション、ユーティリティの中に 
Text Editor として起動用アイコンが設定されている。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mac-windows-&quot;&gt;Mac, Windows へのインストール&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;ダウンロードサイト&lt;/a&gt; には、
Mac用, Windows用のダウンロードボタンがある。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Macには、OS X 用のもの (VSCode-darwin-stable.zip) をダウンロードし、
zip ファイルをダブルクリックすると、アプリケーションファイルが入っているので、
アプリケーションフォルダに移動する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windowsは、インストーラによって簡単にインストールできる。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extension-&quot;&gt;Extension の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt;VisualStudio/Marketplace&lt;/a&gt; から、
役に立つ Extension を VScode に導入する方法を示す。&lt;/p&gt;

&lt;p&gt;たとえば &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=donjayamanne.python&quot;&gt;Python Extension&lt;/a&gt; は、
その Installation 方法に記載のとおり、
コマンド入力ライン（F1キー または ctrl+shift+P / command+shift+P..mac）で、
Extensions: install extensions
が選択肢に表示されるように適宜文字を入力してこれを選ぶ。
そして表示される Extension 選択肢の中から導入したいものを選択すると
インストールされる。&lt;/p&gt;

&lt;h2 id=&quot;python-&quot;&gt;Python 実行環境の設定&lt;/h2&gt;

&lt;p&gt;ワークスペースフォルダを指定するために、
エクスプローラー（ウィンドウ左上のアイコンを押して、フォルダーを開くを押して
出てくるエクスプローラーメニュー）にて、実行環境を働かせたいフォルダーを指定する。&lt;/p&gt;

&lt;p&gt;次に、コマンド入力ライン（F1キー または ctrl+shift+P / command+shift+P..mac）で、
Tasks: Configure Task Runner
を選択するために適宜入力して選択後、 Others を選ぶと、
定義ファイル tasks.json が表示されるので下記のように編集する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;command&quot;: &quot;python3&quot;,
&quot;isShellCommand&quot;: true,
&quot;args&quot;: [&quot;${file}&quot;],
&quot;showOutput&quot;: &quot;always&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この内容は、ワークスペースフォルダの .vscode ディレクトリに tasks.json として書き込まれる。&lt;/p&gt;

&lt;p&gt;Python のコードを書いたとき、ファイルを保存して
Tasks: Run Build Task (Ctrl+Shift+B / Command+Shift+B..Mac)
でエディタとは別エリアに実行結果が表示される。&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Raspberry Pi 動作までの設定</title>
        <link>http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting.html</guid>
        <description>&lt;p&gt;Raspberry Pi のセッティング&lt;/p&gt;

&lt;h2 id=&quot;raspberry-pi-&quot;&gt;Raspberry Pi の起動メディア作成&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MicroSD に OS/Rasbian を用意
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;Raspberry Pi のサイト&lt;/a&gt; から Raspbian をダウンロード
        &lt;ul&gt;
          &lt;li&gt;選択肢として、NOOBS, RASPBIAN, Third party’s がある。&lt;br /&gt;
RASPBIAN が Supported OS である。
また、NOOBS はいくつかのOSが含まれたインストーラとなっている。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;zip ファイルを展開し、イメージを得る（2015-05-05-raspbian-wheezy.img）&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&quot;&gt;インストレーション・ガイド&lt;/a&gt; に従って microSD カードに書き込み
        &lt;ul&gt;
          &lt;li&gt;コマンド・ラインからの方法の場合&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    $ diskutil list  
       （SDカードの IDENTIFIER を得る／disk2s1 ではなく disk2 *付のほう）  
    $ diskutil unmountDisk /dev/disk2  
       （Unmount of all volumes on disk2 was successful のメッセージ）  
    $ sudo dd bs=1m if=2015-05-05-raspbian-wheezy.img of=/dev/disk2  
       （30分かかる。実行状況は ctrl+t で表示できる）&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;MicroSD に OS/Rasbian を用意（NOOBS ではなく Raspbian で試す）
    &lt;ul&gt;
      &lt;li&gt;Raspbian の ZIP をダウンロード&lt;br /&gt;
 （2016.5.23 現在, RASPBIAN JESSIE 4.4 / May 2016, 1.3GB 約20分）&lt;/li&gt;
      &lt;li&gt;チェックサムの確認&lt;br /&gt;
 　ダウンロードした zip ファイルに対して、shasum コマンドを適用した戻り値と
 　サイトに表示されている SHA-1値を diff コマンド等で比較する。&lt;br /&gt;
$ shasum *.zip&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;コマンドラインからの方法に従ったインストール
    &lt;ul&gt;
      &lt;li&gt;SD カードの Disk ID を diskutil コマンドを使って得る&lt;br /&gt;
　 （パーティションではなく、Disk ID なので、下記の場合 disk4 である）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;        $ diskutil list  
        /dev/disk4 (internal, physical):
         #:                       TYPE NAME                    SIZE       IDENTIFIER
         0:     FDisk_partition_scheme                        *8.0 GB     disk4
         1:                 DOS_FAT_32 NO NAME                 8.0 GB     disk4s1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;- SD カードをアンマウントする  

$ diskutil unmountDisk /dev/disk4　（上記の Disk ID の場合）

- イメージをSDカードに転送  

$ sudo dd bs=1m if=2016-05-..........img of=/dev/rdisk4
   （30分かかる。実行状況は ctrl+t で表示できる）
   
- SD カードをアンマウントする  

$ diskutil unmountDisk /dev/disk4　（上記の Disk ID の場合）

- SD カードを抜いて、microSD カードを Raspberry PI に挿入する。
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;raspberry-pi--1&quot;&gt;Raspberry Pi 起動時の設定作業&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;電源を入れるとウィンドウシステムまで自動的に立ち上がる。&lt;br /&gt;
（Python2, Python3, Libre Office もインストール済となっている）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ネットワークを設定してブラウザで動作確認する。&lt;br /&gt;
ブラウザで日本語が表示されない場合は、漢字フォントのインストールの必要性と
ロケールの設定が疑わしい。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SD カードの容量確認&lt;br /&gt;
  $ df -h&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;パッケージのリストをサーバーから入手&lt;br /&gt;
  $ sudo apt-get update&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;漢字フォントのインストール  &lt;br /&gt;
  $ sudo apt-get install ttf-kochi-gothic xfonts-intl-japanese xfonts-intl-japanese-big xfonts-kaname&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;初期設定（ロケールの設定を含めて）&lt;br /&gt;
スタートメニューの Preferences の中の Raspberry PI Configuration を起動&lt;br /&gt;
（ターミナルを起動して $ sudo raspi-config を行うのと同じと思われる）
    &lt;ul&gt;
      &lt;li&gt;‘System’ タブで、&lt;br /&gt;
Expand Filesystem を押す（既に Expand モードのようである）&lt;br /&gt;
基本的にデフォルトでよいと思われる。&lt;/li&gt;
      &lt;li&gt;‘Interface’ タブ、’Performance’ タブも、基本的にデフォルトでよいと思われる。&lt;/li&gt;
      &lt;li&gt;‘Localization’ タブで、&lt;br /&gt;
Locale &amp;gt;  Language: ja (Japanese)  Country: JP (Japan)  Character Set: UTF-8&lt;br /&gt;
Timezone &amp;gt;  Area: Japan &lt;br /&gt;
Keyboard &amp;gt;  Country: Japan  Variant: Japanese&lt;br /&gt;
WiFiCounty &amp;gt;  WiFi Country Code: JP Japan&lt;br /&gt;
+リブートが促される。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ウィンドウシステムとしての日本語表示ができているか、ブラウザで日本語表示ができているか確認する。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;かな漢字変換のインストール（メジャーなものとして２種類）&lt;/p&gt;

    &lt;p&gt;$ sudo apt-get install ibus ibus-anthy&lt;br /&gt;
  $ sudo apt-get install uim uim-anthy&lt;br /&gt;
  $ sudo apt-get install uim-dict-gtk3    （uim で用いる漢字辞書ツール）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考サイト
https://www.generation.ne.jp/topics/raspberry01/&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Raspberry Pi の各種セッティング</title>
        <link>http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting-etc.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/raspberrypi/setting/RaspberryPi-Setting-etc.html</guid>
        <description>&lt;p&gt;Raspberry Pi のセッティング備忘録&lt;/p&gt;

&lt;h2 id=&quot;config-&quot;&gt;config 画面の起動&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo raspi-config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;x-window-&quot;&gt;X window の立ち上げ&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ startx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;anthy&quot;&gt;かな漢字変換（Anthy）のインストール&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo apt-get install ibus-anthy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;スタートメニューの ‘設定’ の中にある「iBus の設定」を選んで、
インプットメソッドの選択タブで日本語の Anthy を
上部に表示させて「追加」ボタンを押す。&lt;/p&gt;

&lt;p&gt;ctrl + space で かな漢字の on/off&lt;/p&gt;

&lt;h2 id=&quot;ipython-notebook-&quot;&gt;IPython notebook のインストール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python2 用&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install ipython ipython-notebook&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;起動は  ipython notebook&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python3 用&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install ipython3 ipython3-notebook&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;起動は  ipython3 notebook&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IPython の中から、python のバージョンを表示させるには、&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import sys
sys.version_info&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 20 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>CentOS7 における各種サービスの管理</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/admin/CentOS7-systemctl.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/admin/CentOS7-systemctl.html</guid>
        <description>&lt;p&gt;サーバーの管理についてのメモ（httpd, firewalld などサービスの管理）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;サービスの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl start サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;サービスの停止&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl stop サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;自動起動の指定&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl enable または disable サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;管理できるサービスの一覧を表示&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl list-unit-files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;サービスのステータス&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl status サービス名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 18 May 2016 12:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Python (mod_wsgi) を使った FORMタグの処理</title>
        <link>http://NaokiMizutani.github.io/tech/python/mod_wsgi/form/Python-Web-Upload.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/mod_wsgi/form/Python-Web-Upload.html</guid>
        <description>&lt;p&gt;HTML の入力・送信フォーム中のテキストボックスやファイルアップロードに対する
処理方法について、Python/mod_wsgi の利用を前提にサンプルを示す。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;テキストボックスの例&lt;/h2&gt;

&lt;p&gt;文字入力のためのテキストボックスに文字が入力され送信ボタンが押された場合に、
POSTメソッドでサーバに入力データを回収する手続きを示す。&lt;/p&gt;

&lt;p&gt;Apache 等のサーバで mod_wsgi が動作する python3 環境を想定している。&lt;/p&gt;

&lt;p&gt;mod_wsgi についてのサンプルプログラムはいくつか検索できるが、python3 で
漢字入力がうまく動作するまでに試行錯誤しなければならなかった。&lt;/p&gt;

&lt;p&gt;— input.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import cgi

html = &amp;#39;&amp;#39;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;ja&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;テキスト入力フィールドに入力された文字を取得する&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;テキスト入力フィールドに入力された文字を取得する&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;入力された文字は、「%s」です。&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;quot;http://localhost/input.py&amp;quot; method=&amp;quot;post&amp;quot; AcceptEncoding=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;text&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

def application(environ, start_response):
	method = environ.get(&amp;#39;REQUEST_METHOD&amp;#39;)
	data = &amp;#39;&amp;#39;
	if method == &amp;quot;GET&amp;quot;:
		pass
	elif method == &amp;quot;POST&amp;quot;:
		wsgi_input = environ.get(&amp;#39;wsgi.input&amp;#39;)
		form = cgi.FieldStorage(fp=wsgi_input, environ=environ, keep_blank_values=True)
#		for key in form:
#			data += &amp;quot;name:&amp;quot; + key + &amp;quot; value:&amp;quot; + form[key].value + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;
		data = form[&amp;#39;text&amp;#39;].value

	output = html % data
	status = &amp;#39;200 OK&amp;#39;
	response_headers = [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;),
				(&amp;#39;Content-Length&amp;#39;, str(len(output.encode(&amp;#39;utf-8&amp;#39;))))]
	start_response(status, response_headers)
	return [output.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ファイル・アップロードの例&lt;/h2&gt;

&lt;p&gt;GETメソッドでアクセスされた場合にファイル名選択のためのダイアログを表示し、
ファイルが選択され送信ボタンが押されると、
POSTメソッドでサーバにファイルデータを回収し、
ファイルの内容を入手する手続きを示す。&lt;/p&gt;

&lt;p&gt;アップロードされたファイルのデータは、サーバ側の実ファイルとして
保存するようにした。&lt;/p&gt;

&lt;p&gt;アップロードを行うには、フォームで enctype を multipart/form-data にする。&lt;/p&gt;

&lt;p&gt;— upload.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import cgi
from tempfile import TemporaryFile

html_head = &amp;#39;&amp;#39;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;ja&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

html_get = &amp;#39;&amp;#39;&amp;#39;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;ファイル・アップロードのテスト&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;ファイル・アップロード操作画面&amp;lt;/h1&amp;gt;
&amp;lt;form action=&amp;quot;http://localhost/upload.py&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
--- Select File and Push Upload-Button --- &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;upfile&amp;quot; size=&amp;quot;50&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot; Upload &amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

html_post = &amp;#39;&amp;#39;&amp;#39;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;ファイル・アップロードのテスト&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;アップロードされたファイルの内容&amp;lt;/h1&amp;gt;
--- Uploaded Text --- &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;p&amp;gt;%s&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

def application(environ, start_response):
	method = environ.get(&amp;#39;REQUEST_METHOD&amp;#39;)
	data = &amp;#39;&amp;#39;
	if method == &amp;quot;GET&amp;quot;:
		output = html_head + html_get
	elif method == &amp;quot;POST&amp;quot;:
		form = cgi.FieldStorage(environ[&amp;#39;wsgi.input&amp;#39;], environ=environ, keep_blank_values=True)
		data = form.getvalue(&amp;#39;upfile&amp;#39;, &amp;#39;&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
		output = html_head + html_post % data
		outf = open(&amp;#39;/tmp/tmp.txt&amp;#39;, &amp;#39;w&amp;#39;)
		outf.write(data)
		outf.close()
	status = &amp;#39;200 OK&amp;#39;
	response_headers = [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;),
				(&amp;#39;Content-Length&amp;#39;, str(len(output.encode(&amp;#39;utf-8&amp;#39;))))]
	start_response(status, response_headers)
	return [output.encode(&amp;#39;utf-8&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;参考サイト&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://d.hatena.ne.jp/addition/20130330/1364620476&lt;/li&gt;
  &lt;li&gt;https://github.com/thejimmyg/wsgi-file-upload&lt;/li&gt;
  &lt;li&gt;http://flying-cat.hatenablog.com/entry/2013/09/03/102807&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 May 2016 15:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>CentOS7 への Google Chorome のインストール</title>
        <link>http://NaokiMizutani.github.io/tech/centos7/chrome/CentOS-Chrome.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/centos7/chrome/CentOS-Chrome.html</guid>
        <description>&lt;p&gt;Google Chrome はモバイル系も含めると Webブラウザとして圧倒的な世界シェア(４割強)を
有しているようだ。
デベロッパーツールも組み込まれており、その解説が様々なサイトに載っている。
ところが、Chrome は Fedora系のパッケージサポートから外れていて、簡単に yum でインストールできない。CentOS7 への Chrome のインストールを行ったので記しておく。&lt;/p&gt;

&lt;h2 id=&quot;google-chrome-&quot;&gt;Google Chrome のダウンロードとインストール方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.co.jp/chrome/browser/desktop/index.html&quot;&gt;Google Chrome&lt;/a&gt; のダウンロードサイトから、Chrome for Linux (Fedora 版）をダウンロードする。
ダウンロードすると、64bit ステーブル版の rpm パッケージがダウンロードされる。&lt;/p&gt;

&lt;p&gt;この rpm パッケージファイルをもとにインストールする。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# yum localinstall rpmパッケージファイル名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;インストールが完了すると、デスクトップのアプリケーションにアイコンが追加されている。&lt;/p&gt;
</description>
        <pubDate>Sat, 14 May 2016 12:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Jinja2 を用いた JavaScript グラフのスクリプト生成</title>
        <link>http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2-JS.html</link>
        <guid isPermaLink="true">http://NaokiMizutani.github.io/tech/python/jinja2/Python3-Jinja2-JS.html</guid>
        <description>&lt;p&gt;&lt;a href=&quot;/tech/python/jinja2/Python3-Jinja2.html&quot;&gt;Jinja2 を試してみて&lt;/a&gt;、
テンプレートに流し込む大まかな手続きをつかんだので、
Jinja2 を使ってサイト用の HTML(JavaScript) を生成する。&lt;/p&gt;

&lt;p&gt;JavaScriptグラフパッケージ &lt;a href=&quot;/tech/javascript/highcharts/HighCharts-JavaScript.html&quot;&gt;HighCharts&lt;/a&gt; のデータを Python で生成して描かせるタスクを目標とし、
&lt;a href=&quot;/tech/python/apache/Apache_Python3.html&quot;&gt;Apache + mod_wsgi&lt;/a&gt; など、
Python3 が動作するサーバ環境があるものとする。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下に示す２つのファイルを /var/www/html に配置する。&lt;/p&gt;

&lt;p&gt;template.html は、Highcharts を用いたグラフ描画を行う html ファイルである。
グラフ描画のためのデータ部分を {{ data_contents }} と置いて、
ここに jinja2 を用いて Python プログラムでデータを生成して流し込む。&lt;/p&gt;

&lt;p&gt;Python プログラム jinja2webtest.py の中で、リスト case_list には 10種類のパラメータが
格納してある。
まず、それぞれのパラメータ &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; に対して、
関数   &lt;script type=&quot;math/tex&quot;&gt;y = 1 / ( 1 + e^{-D a (x - b)} )&lt;/script&gt; に従う &lt;script type=&quot;math/tex&quot;&gt;(x, y)&lt;/script&gt; 数値データを生成する。&lt;/p&gt;

&lt;p&gt;そして、生成されたグラフデータの数値は、凡例用のデータ名やグラフ線の色指定とともに
Highcharts用のテキストデータとし、jinja2 によってテンプレートに入れ込む。&lt;/p&gt;

&lt;p&gt;手順 1）1つの(a, b)組に対して、下に示すテキストを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        name: &#39;Data1: (1.0, 0.0)&#39;,
        color: &#39;rgba(255, 0, 0, 1.0)&#39;,
        data: 
        [
            [-4,0.001],
            [-3.9,0.001],
            [-3.8,0.002],
            [-3.7,0.002], 
              :
              :
        ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;手順 2）さらに (a, b)組があれば、上記に続けてカンマを入れた後、同様のテキストを生成する。&lt;/p&gt;

&lt;p&gt;作成された HTML は mod_wsgi によって web発信される仕組みとなっている。&lt;/p&gt;

&lt;p&gt;なお、Python のファイル jinja2webtest.py において、Jinja2 の FileSystemLoader のところで
相対パスを設定したところ、テンプレートファイルを見つけられない現象に陥った。
解決法がわからなかったので、絶対パスを使っている。&lt;/p&gt;

&lt;p&gt;— template.html&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
		&amp;lt;title&amp;gt;Highcharts Example&amp;lt;/title&amp;gt;

		&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
${demo.css}
		&amp;lt;/style&amp;gt;
		&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
$(function () {
    $(&amp;#39;#container&amp;#39;).highcharts({
        chart: {
            zoomType: &amp;#39;xy&amp;#39;
        },
        title: {
            text: &amp;#39;項目特性曲線&amp;#39;
        },
        subtitle: {
            text: &amp;#39;Some curves with params:(a, b)&amp;#39;
        },
        xAxis: {
            title: {
                enabled: true,
                text: &amp;#39;Ability (θ)&amp;#39;
            },
            min: -4.0,
            max: 4.0,
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true,
            gridLineWidth: 1
        },
        yAxis: {
            title: {
                text: &amp;#39;Probability&amp;#39;
            },
            min: 0.0,
            max: 1.0
        },
        legend: {
            layout: &amp;#39;vertical&amp;#39;,
            align: &amp;#39;left&amp;#39;,
            verticalAlign: &amp;#39;top&amp;#39;,
            x: 55,
            y: 50,
            floating: true,
            backgroundColor: (Highcharts.theme &amp;amp;&amp;amp; Highcharts.theme.legendBackgroundColor) || &amp;#39;#FFFFFF&amp;#39;,
            borderWidth: 1
        },
        plotOptions: {
            series: {
                marker: {
                    enabled: false
                }
            }
        },
        series: [
{{ data_contents }}
        ] 
    });
});
		&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/highcharts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://code.highcharts.com/modules/exporting.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&amp;quot;container&amp;quot; style=&amp;quot;min-width: 310px; height: 600px; max-width: 800px; margin: 0 auto&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;— jinja2webtest.py&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import math
from jinja2 import Environment, FileSystemLoader

class AppSample(object):

    def __init__(self):
        pass

    def __call__(self, environ, start_response):
        method = environ[&amp;#39;REQUEST_METHOD&amp;#39;]
        if method == &amp;#39;GET&amp;#39;:
            return self.message1(environ, start_response)
        else:
            start_response(&amp;#39;501 Not Implemented&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain&amp;#39;)])
            return &amp;#39;Not Implemented&amp;#39;

    def message1(self, environ, start_response):

        env = Environment(loader=FileSystemLoader(&amp;#39;/var/www/html/&amp;#39;, encoding=&amp;#39;utf8&amp;#39;))
        template = env.get_template(&amp;#39;template.html&amp;#39;)
        
        selection_color = [&amp;quot;color: &amp;#39;rgba(255,    0,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  255,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,    0,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  255,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(255,    0,  255, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(255,  255,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(128,    0,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,  128,    0, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(  0,    0,  128, 1.0)&amp;#39;,\n&amp;quot;, 
        		   &amp;quot;color: &amp;#39;rgba(100,  100,  100, 1.0)&amp;#39;,\n&amp;quot;]
        
        insert_text = &amp;#39;&amp;#39;
        tab = &amp;#39; &amp;#39; * 4
        
        case_list = [[&amp;quot;Data1&amp;quot;, 1.0, 0.0],
                     [&amp;quot;Data2&amp;quot;, 2.0, -0.5],
                     [&amp;quot;Data3&amp;quot;, 3.0, 0.3],
        	     [&amp;quot;Data4&amp;quot;, 4.0, -2.0],
                     [&amp;quot;Data5&amp;quot;, 5.0, 1.5],
                     [&amp;quot;Data6&amp;quot;, 6.0, 0.7],
        	     [&amp;quot;Data7&amp;quot;, 7.0, -1.5],
                     [&amp;quot;Data8&amp;quot;, 8.0, 0.8],
                     [&amp;quot;Data9&amp;quot;, 9.0, 1.2],
        	     [&amp;quot;Data10&amp;quot;, 10.0, -0.7]]
        
        val_D = 1.701
        for n in range(len(case_list)):
            case = case_list[n]
            val_a = case[1] 
            val_b = case[2]
            insert_text += tab*2 + &amp;quot;{\n&amp;quot;
            insert_text += tab*3 + &amp;quot;name: &amp;#39;{0}: ({1:5.3f}, {2:5.3f})&amp;#39;,\n&amp;quot;.format(case[0], val_a, val_b)
            insert_text += tab*3 + selection_color[n]
            insert_text += tab*3 + &amp;quot;data: [\n&amp;quot;
            for ntheta in range(-40, 41, 1):
                val_theta = ntheta / 10.0
                val_prob = 1.0 / (1.0 + math.exp(- val_D * val_a * (val_theta - val_b))) 
                if ntheta == 40:
                    insert_text += (tab*4 + &amp;quot;[{0:3.1f},{1:5.3f}]\n&amp;quot;.format(val_theta, val_prob))
                else:
                    insert_text += (tab*4 + &amp;quot;[{0:3.1f},{1:5.3f}],\n&amp;quot;.format(val_theta, val_prob))
            insert_text += tab*3 + &amp;quot;]\n&amp;quot;
            if n == len(case_list) - 1:
                insert_text += tab*2 + &amp;quot;}\n&amp;quot;
            else:
                insert_text += tab*2 + &amp;quot;},\n&amp;quot;
        text = template.render({&amp;#39;data_contents&amp;#39;: insert_text})
        
        start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/html; charset=utf-8&amp;#39;)])

        return [text.encode(&amp;#39;utf-8&amp;#39;)]


application = AppSample()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 13 May 2016 20:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
